"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6529],{25885:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>u,toc:()=>h});var t=s(62540),r=s(43023),a=s(78296),i=s(22491),l=s(79501);const o={title:"Getting Started"},d=void 0,u={id:"guides/getting-started",title:"Getting Started",description:"One of the best ways to learn something is by example!",source:"@site/versioned_docs/version-7.0.0/guides/getting-started.md",sourceDirName:"guides",slug:"/guides/getting-started",permalink:"/docs/7.0.0/guides/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/guides/getting-started.md",tags:[],version:"7.0.0",frontMatter:{title:"Getting Started"},sidebar:"docs",previous:{title:"Guides",permalink:"/docs/7.0.0/category/guides"},next:{title:"The Validation Chain",permalink:"/docs/7.0.0/guides/validation-chain"}},c={},h=[{value:"Set up",id:"set-up",level:2},{value:"Adding a validator",id:"adding-a-validator",level:2},{value:"Handling validation errors",id:"handling-validation-errors",level:2},{value:"Sanitizing inputs",id:"sanitizing-inputs",level:2},{value:"Accessing validated data",id:"accessing-validated-data",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function p(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"One of the best ways to learn something is by example!\nSo let's roll the sleeves up and get some coding happening."}),"\n",(0,t.jsx)(n.h2,{id:"set-up",children:"Set up"}),"\n",(0,t.jsx)(n.p,{children:"The first thing that one needs is a express.js application running.\nLet's implement one that says hi to someone; for this, create a new file using your favorite language\nand add the following code:"}),"\n",(0,t.jsxs)(a.A,{groupId:"lang",children:[(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js" showLineNumbers',children:"const express = require('express');\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', (req, res) => {\n  res.send(`Hello, ${req.query.person}!`);\n});\n\napp.listen(3000);\n"})})}),(0,t.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts" showLineNumbers',children:"import * as express from 'express';\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', (req, res) => {\n  res.send(`Hello, ${req.query.person}!`);\n});\n\napp.listen(3000);\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["Now run this file by executing ",(0,t.jsx)(n.code,{children:"node index.js"})," or ",(0,t.jsx)(n.code,{children:"ts-node index.ts"})," on your terminal.",(0,t.jsx)("br",{}),"\nThe HTTP server should be running, and you can open ",(0,t.jsx)(n.a,{href:"http://localhost:3000/hello?person=John",children:"http://localhost:3000/hello?person=John"}),"\nto salute John!"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/node-dev",children:"node-dev"})," or ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/ts-node-dev",children:"ts-node-dev"}),"\nto run your application instead.\nThese automatically restart the application whenever a file is changed, so you don't have to do this yourself!"]})}),"\n",(0,t.jsx)(n.h2,{id:"adding-a-validator",children:"Adding a validator"}),"\n",(0,t.jsxs)(n.p,{children:["So the application is working, but there are problems with it. Most notably, you don't want to\nsay hey when the person's name is not set.",(0,t.jsx)(n.br,{}),"\n","For example, going to ",(0,t.jsx)(n.a,{href:"http://localhost:3000/hello",children:"http://localhost:3000/hello"}),' will print "Hello, undefined!".']}),"\n",(0,t.jsxs)(n.p,{children:["That's where express-validator comes in handy: let's add a ",(0,t.jsx)(n.strong,{children:"validator"})," that checks that the ",(0,t.jsx)(n.code,{children:"person"}),"\nquery string cannot be empty, with the intuitively named validator ",(0,t.jsx)(n.code,{children:"notEmpty"}),":"]}),"\n",(0,t.jsxs)(a.A,{groupId:"lang",children:[(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js" showLineNumbers',children:"const express = require('express');\n// highlight-next-line\nconst { query } = require('express-validator');\nconst app = express();\n\napp.use(express.json());\n// highlight-next-line\napp.get('/hello', query('person').notEmpty(), (req, res) => {\n  res.send(`Hello, ${req.query.person}!`);\n});\n\napp.listen(3000);\n"})})}),(0,t.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts" showLineNumbers',children:"import * as express from 'express';\n// highlight-next-line\nimport { query } from 'express-validator';\nconst app = express();\n\napp.use(express.json());\n// highlight-next-line\napp.get('/hello', query('person').notEmpty(), (req, res) => {\n  res.send(`Hello, ${req.query.person}!`);\n});\n\napp.listen(3000);\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["Now, restart your application, and go to ",(0,t.jsx)(n.a,{href:"http://localhost:3000/hello",children:"http://localhost:3000/hello"}),' again.\nHmm, it still prints "Hello, undefined!"... why?']}),"\n",(0,t.jsx)(n.h2,{id:"handling-validation-errors",children:"Handling validation errors"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"express-validator validators do not report validation errors to users automatically"}),".",(0,t.jsx)(n.br,{}),"\n","The reason for this is simple: as you add more validators, or for more fields,\nhow do you want to collect the errors?\nDo you want a list of all errors, only one per field, only one overall...?"]}),"\n",(0,t.jsxs)(n.p,{children:["So the next obvious step is to change the above code again, this time verifying the validation result\nwith the ",(0,t.jsxs)(n.a,{href:"/docs/7.0.0/api/validation-result",children:[(0,t.jsx)(n.code,{children:"validationResult"})," function"]}),":"]}),"\n",(0,t.jsxs)(a.A,{groupId:"lang",children:[(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js" showLineNumbers',children:"const express = require('express');\n// highlight-next-line\nconst { query, validationResult } = require('express-validator');\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', query('person').notEmpty(), (req, res) => {\n  // highlight-start\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    return res.send(`Hello, ${req.query.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n  // highlight-end\n});\n\napp.listen(3000);\n"})})}),(0,t.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts" showLineNumbers',children:"import * as express from 'express';\n// highlight-next-line\nimport { query, validationResult } from 'express-validator';\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', query('person').notEmpty(), (req, res) => {\n  // highlight-start\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    return res.send(`Hello, ${req.query.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n  // highlight-end\n});\n\napp.listen(3000);\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["Now if you access ",(0,t.jsx)(n.a,{href:"http://localhost:3000/hello",children:"http://localhost:3000/hello"})," again, what you'll see\nis the following JSON content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "errors": [\n    {\n      "location": "query",\n      "msg": "Invalid value",\n      "path": "person",\n      "type": "field"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, what this is telling us is that"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"there's been exactly one error in this request;"}),"\n",(0,t.jsxs)(n.li,{children:["the error is in a field (",(0,t.jsx)(n.code,{children:'type: "field"'}),");"]}),"\n",(0,t.jsxs)(n.li,{children:["this field is called ",(0,t.jsx)(n.code,{children:"person"}),";"]}),"\n",(0,t.jsxs)(n.li,{children:["it's located in the query string (",(0,t.jsx)(n.code,{children:'location: "query"'}),");"]}),"\n",(0,t.jsxs)(n.li,{children:["the error message that was given was ",(0,t.jsx)(n.code,{children:"Invalid value"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This is a better scenario, but it can still be improved. Let's continue."}),"\n",(0,t.jsx)(n.h2,{id:"sanitizing-inputs",children:"Sanitizing inputs"}),"\n",(0,t.jsxs)(n.p,{children:["While the user can no longer send empty person names, it can still inject HTML into your page!\nThis is known as the ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cross-site_scripting",children:"Cross-Site Scripting vulnerability (XSS)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's see how it works. Go to ",(0,t.jsx)(n.a,{href:"http://localhost:3000/hello?person=%3Cb%3EJohn%3C/b%3E",children:(0,t.jsx)(l.A,{values:{query:"<b>John</b>"},children:"http://localhost:3000/hello?person={query}"})}),',\nand you should see "Hello, ',(0,t.jsx)("b",{children:"John"}),'!".']}),"\n",(0,t.jsxs)(n.p,{children:["While this example is fine, an attacker could change the ",(0,t.jsx)(n.code,{children:"person"})," query string to a ",(0,t.jsx)(n.code,{children:"<script>"})," tag\nwhich loads its own JavaScript that could be harmful."]}),"\n",(0,t.jsxs)(n.p,{children:["In this scenario, one way to mitigate the issue with express-validator is to use a ",(0,t.jsx)(n.strong,{children:"sanitizer"}),",\nmost specifically ",(0,t.jsx)(n.code,{children:"escape"}),", which transforms special HTML characters with others that can be represented\nas text."]}),"\n",(0,t.jsxs)(a.A,{groupId:"lang",children:[(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js" showLineNumbers',children:"const express = require('express');\nconst { query, validationResult } = require('express-validator');\nconst app = express();\n\napp.use(express.json());\n// highlight-next-line\napp.get('/hello', query('person').notEmpty().escape(), (req, res) => {\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    return res.send(`Hello, ${req.query.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n});\n\napp.listen(3000);\n"})})}),(0,t.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts" showLineNumbers',children:"import * as express from 'express';\nimport { query, validationResult } from 'express-validator';\nconst app = express();\n\napp.use(express.json());\n// highlight-next-line\napp.get('/hello', query('person').notEmpty().escape(), (req, res) => {\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    return res.send(`Hello, ${req.query.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n});\n\napp.listen(3000);\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:'Now, if you restart the server and refresh the page, what you\'ll see is "Hello, <b>John</b>!".\nOur example page is no longer vulnerable to XSS!'}),"\n",(0,t.jsx)(n.h2,{id:"accessing-validated-data",children:"Accessing validated data"}),"\n",(0,t.jsxs)(n.p,{children:["This application is pretty simple, but as you start growing it, it might become quite repetitive to\ntype ",(0,t.jsx)(n.code,{children:"req.body.fieldName1"}),", ",(0,t.jsx)(n.code,{children:"req.body.fieldName2"}),", and so on."]}),"\n",(0,t.jsxs)(n.p,{children:["To help with this, you can use ",(0,t.jsx)(n.a,{href:"/docs/7.0.0/api/matched-data",children:(0,t.jsx)(n.code,{children:"matchedData()"})}),", which automatically collects\nall data that express-validator has validated and/or sanitized:"]}),"\n",(0,t.jsxs)(a.A,{groupId:"lang",children:[(0,t.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js" showLineNumbers',children:"const express = require('express');\n// highlight-next-line\nconst { query, matchedData, validationResult } = require('express-validator');\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', query('person').notEmpty().escape(), (req, res) => {\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    // highlight-next-line\n    const data = matchedData(req);\n    // highlight-next-line\n    return res.send(`Hello, ${data.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n});\n\napp.listen(3000);\n"})})}),(0,t.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts" showLineNumbers',children:"import * as express from 'express';\n// highlight-next-line\nimport { query, matchedData, validationResult } from 'express-validator';\nconst app = express();\n\napp.use(express.json());\napp.get('/hello', query('person').notEmpty().escape(), (req, res) => {\n  const result = validationResult(req);\n  if (result.isEmpty()) {\n    // highlight-next-line\n    const data = matchedData(req);\n    // highlight-next-line\n    return res.send(`Hello, ${data.person}!`);\n  }\n\n  res.send({ errors: result.array() });\n});\n\napp.listen(3000);\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,t.jsxs)(n.p,{children:["These steps conclude the basic guide on getting started with express-validator.",(0,t.jsx)("br",{}),"\nYou might want to continue reading about the other available features:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/docs/7.0.0/guides/validation-chain",children:"the validation chain"})]}),"\n",(0,t.jsxs)(n.li,{children:["Master the ",(0,t.jsx)(n.a,{href:"/docs/7.0.0/guides/field-selection",children:"field selection"})]}),"\n",(0,t.jsxs)(n.li,{children:["Deeply ",(0,t.jsx)(n.a,{href:"/docs/7.0.0/guides/customizing",children:"customize express-validator"})]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},22491:(e,n,s)=>{s.d(n,{A:()=>i});s(63696);var t=s(11750);const r={tabItem:"tabItem_wHwb"};var a=s(62540);function i(e){var n=e.children,s=e.hidden,i=e.className;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,i),hidden:s,children:n})}},78296:(e,n,s)=>{s.d(n,{A:()=>w});var t=s(63696),r=s(11750),a=s(90766),i=s(49519),l=s(14395),o=s(35043),d=s(44544),u=s(48708);function c(e){var n,s;return null!=(n=null==(s=t.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,t.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:s.filter(Boolean))?n:[]}function h(e){var n=e.values,s=e.children;return(0,t.useMemo)((function(){var e=null!=n?n:function(e){return c(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(s);return function(e){var n=(0,d.X)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,s])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function x(e){var n=e.queryString,s=void 0!==n&&n,r=e.groupId,a=(0,i.W6)(),l=function(e){var n=e.queryString,s=void 0!==n&&n,t=e.groupId;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:s,groupId:r});return[(0,o.aZ)(l),(0,t.useCallback)((function(e){if(l){var n=new URLSearchParams(a.location.search);n.set(l,e),a.replace(Object.assign({},a.location,{search:n.toString()}))}}),[l,a])]}function g(e){var n,s,r,a,i=e.defaultValue,o=e.queryString,d=void 0!==o&&o,c=e.groupId,g=h(e),v=(0,t.useState)((function(){return function(e){var n,s=e.defaultValue,t=e.tabValues;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+s+'" but none of its children has the corresponding value. Available values are: '+t.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return s}var r=null!=(n=t.find((function(e){return e.default})))?n:t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:g})})),m=v[0],j=v[1],f=x({queryString:d,groupId:c}),y=f[0],b=f[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),s=(0,u.Dv)(n),r=s[0],a=s[1],[r,(0,t.useCallback)((function(e){n&&a.set(e)}),[n,a])]),q=w[0],N=w[1],S=function(){var e=null!=y?y:q;return p({value:e,tabValues:g})?e:null}();return(0,l.A)((function(){S&&j(S)}),[S]),{selectedValue:m,selectValue:(0,t.useCallback)((function(e){if(!p({value:e,tabValues:g}))throw new Error("Can't select invalid tab value="+e);j(e),b(e),N(e)}),[b,N,g]),tabValues:g}}var v=s(86681);const m={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var j=s(62540);function f(e){var n=e.className,s=e.block,t=e.selectedValue,i=e.selectValue,l=e.tabValues,o=[],d=(0,a.a_)().blockElementScrollPositionUntilNextRender,u=function(e){var n=e.currentTarget,s=o.indexOf(n),r=l[s].value;r!==t&&(d(n),i(r))},c=function(e){var n,s=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var t,r=o.indexOf(e.currentTarget)+1;s=null!=(t=o[r])?t:o[0];break;case"ArrowLeft":var a,i=o.indexOf(e.currentTarget)-1;s=null!=(a=o[i])?a:o[o.length-1]}null==(n=s)||n.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":s},n),children:l.map((function(e){var n=e.value,s=e.label,a=e.attributes;return(0,j.jsx)("li",Object.assign({role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:function(e){return o.push(e)},onKeyDown:c,onClick:u},a,{className:(0,r.A)("tabs__item",m.tabItem,null==a?void 0:a.className,{"tabs__item--active":t===n}),children:null!=s?s:n}),n)}))})}function y(e){var n=e.lazy,s=e.children,r=e.selectedValue,a=(Array.isArray(s)?s:[s]).filter(Boolean);if(n){var i=a.find((function(e){return e.props.value===r}));return i?(0,t.cloneElement)(i,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map((function(e,n){return(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})}))})}function b(e){var n=g(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,j.jsx)(f,Object.assign({},e,n)),(0,j.jsx)(y,Object.assign({},e,n))]})}function w(e){var n=(0,v.A)();return(0,j.jsx)(b,Object.assign({},e,{children:c(e.children)}),String(n))}},43023:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(63696);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);