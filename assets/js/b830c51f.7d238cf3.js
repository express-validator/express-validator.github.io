"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2496],{5318:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),m=i,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return a?n.createElement(k,l(l({ref:t},p),{},{components:a})):n.createElement(k,l({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7784:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var n=a(5773),i=a(808),r=(a(7378),a(5318)),l=["components"],o={id:"filter-api",title:"filter API"},s=void 0,d={unversionedId:"filter-api",id:"version-5.2.0/filter-api",title:"filter API",description:"These methods are all available via require('express-validator/filter').",source:"@site/versioned_docs/version-5.2.0/api-filter.md",sourceDirName:".",slug:"/filter-api",permalink:"/docs/5.2.0/filter-api",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-5.2.0/api-filter.md",tags:[],version:"5.2.0",frontMatter:{id:"filter-api",title:"filter API"},sidebar:"version-5.2.0/docs",previous:{title:"check API",permalink:"/docs/5.2.0/check-api"},next:{title:"Sanitization Chain API",permalink:"/docs/5.2.0/sanitization-chain-api"}},p={},c=[{value:"<code>matchedData(req[, options])</code>",id:"matcheddatareq-options",level:2},{value:"<code>sanitize(fields)</code>",id:"sanitizefields",level:2},{value:"<code>sanitizeBody(fields)</code>",id:"sanitizebodyfields",level:2},{value:"<code>sanitizeCookie(fields)</code>",id:"sanitizecookiefields",level:2},{value:"<code>sanitizeParam(fields)</code>",id:"sanitizeparamfields",level:2},{value:"<code>sanitizeQuery(fields)</code>",id:"sanitizequeryfields",level:2},{value:"<code>buildSanitizeFunction(locations)</code>",id:"buildsanitizefunctionlocations",level:2}],u={toc:c};function m(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"These methods are all available via ",(0,r.kt)("inlineCode",{parentName:"p"},"require('express-validator/filter')"),"."),(0,r.kt)("h2",{id:"matcheddatareq-options"},(0,r.kt)("inlineCode",{parentName:"h2"},"matchedData(req[, options])")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req"),": the express request object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"options")," ",(0,r.kt)("em",{parentName:"li"},"(optional)"),": an object which accepts the following options:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onlyValidData"),": if set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", the returned value includes data from fields\nthat didn't pass their validations. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locations"),": an array of locations to extract the data from. The acceptable values include\n",(0,r.kt)("inlineCode",{parentName:"li"},"body"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cookies"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"headers"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"params")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),", which means all locations.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Returns:")," an object of data validated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"check")," APIs.")))))),(0,r.kt)("p",null,"Extracts data validated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"check")," APIs from the request and builds\nan object with them. Nested paths and wildcards are properly handled as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Suppose the request looks like this:\n// req.query = { from: '2017-01-12' }\n// req.body = { to: '2017-31-12' }\n\napp.post('/room-availability', check(['from', 'to']).isISO8601(), (req, res, next) => {\n  const queryData = matchedData(req, { locations: ['query'] });\n  const bodyData = matchedData(req, { locations: ['body'] });\n  const allData = matchedData(req);\n  console.log(queryData); // { from: '2017-01-12' }\n  console.log(bodyData);  // { to: '2017-31-12' }\n  console.log(allData);   // { from: '2017-01-12', to: '2017-31-12' }\n});\n")),(0,r.kt)("h2",{id:"sanitizefields"},(0,r.kt)("inlineCode",{parentName:"h2"},"sanitize(fields)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field"),": a string or an array of strings of field names to validate against.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Returns:")," a ",(0,r.kt)("a",{parentName:"p",href:"/docs/5.2.0/sanitization-chain-api"},"Sanitization Chain"))))),(0,r.kt)("p",null,"Creates a sanitization chain for one or more fields. They may be located in any of the following request objects:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.body")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.cookies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.params")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.query"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"* ",(0,r.kt)("inlineCode",{parentName:"em"},"req.headers")," is ",(0,r.kt)("strong",{parentName:"em"},"not")," supported at the moment.")),(0,r.kt)("p",null,"If any of the fields are present in more than one location, then all instances of that field value will be sanitized."),(0,r.kt)("h2",{id:"sanitizebodyfields"},(0,r.kt)("inlineCode",{parentName:"h2"},"sanitizeBody(fields)")),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize(fields)"),", but only sanitizing ",(0,r.kt)("inlineCode",{parentName:"p"},"req.body"),"."),(0,r.kt)("h2",{id:"sanitizecookiefields"},(0,r.kt)("inlineCode",{parentName:"h2"},"sanitizeCookie(fields)")),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize(fields)"),", but only sanitizing ",(0,r.kt)("inlineCode",{parentName:"p"},"req.cookies"),"."),(0,r.kt)("h2",{id:"sanitizeparamfields"},(0,r.kt)("inlineCode",{parentName:"h2"},"sanitizeParam(fields)")),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize(fields)"),", but only sanitizing ",(0,r.kt)("inlineCode",{parentName:"p"},"req.params"),"."),(0,r.kt)("h2",{id:"sanitizequeryfields"},(0,r.kt)("inlineCode",{parentName:"h2"},"sanitizeQuery(fields)")),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize(fields)"),", but only sanitizing ",(0,r.kt)("inlineCode",{parentName:"p"},"req.query"),"."),(0,r.kt)("h2",{id:"buildsanitizefunctionlocations"},(0,r.kt)("inlineCode",{parentName:"h2"},"buildSanitizeFunction(locations)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locations"),": an array of request locations to gather data from.",(0,r.kt)("br",{parentName:"li"}),"May include any of ",(0,r.kt)("inlineCode",{parentName:"li"},"body"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cookies"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"params")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),".",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Returns:")," a variant of ",(0,r.kt)("a",{parentName:"p",href:"#sanitizefields"},(0,r.kt)("inlineCode",{parentName:"a"},"sanitize()"))," sanitizing the given request locations.")))),(0,r.kt)("p",null,"Creates a variant of ",(0,r.kt)("a",{parentName:"p",href:"#sanitizefields"},(0,r.kt)("inlineCode",{parentName:"a"},"sanitize()"))," that sanitizes the given request locations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { buildSanitizeFunction } = require('express-validator/filter');\nconst sanitizeBodyAndQuery = buildSanitizeFunction(['body', 'query']);\n\napp.put('/update-product', [\n  // id being either in req.body or req.query will be converted to int\n  sanitizeBodyAndQuery('id').toInt()\n], productUpdateHandler)\n")))}m.isMDXComponent=!0}}]);