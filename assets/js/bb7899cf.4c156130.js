"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4563],{5318:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>v});var n=a(7378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(a),p=r,v=c["".concat(l,".").concat(p)]||c[p]||m[p]||i;return a?n.createElement(v,s(s({ref:t},d),{},{components:a})):n.createElement(v,s({ref:t},d))}));function v(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9798:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7378),r=a(8944);const i="tabItem_wHwb";function s(e){var t=e.children,a=e.hidden,s=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:a},t)}},3930:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(5773),r=a(7378),i=a(8944),s=a(3457),o=a(3620),l=a(654),u=a(784),d=a(1819);function c(e){return function(e){var t,a;return null!=(t=null==(a=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:c(a);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function p(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function v(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,i=(0,o.k6)(),s=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((function(e){if(s){var t=new URLSearchParams(i.location.search);t.set(s,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[s,i])]}function f(e){var t,a,n,i,s=e.defaultValue,o=e.queryString,l=void 0!==o&&o,u=e.groupId,c=m(e),f=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:s,tabValues:c})})),h=f[0],g=f[1],y=v({queryString:l,groupId:u}),b=y[0],k=y[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),a=(0,d.Nk)(t),n=a[0],i=a[1],[n,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),N=w[0],E=w[1],x=function(){var e=null!=b?b:N;return p({value:e,tabValues:c})?e:null}();return(0,r.useLayoutEffect)((function(){x&&g(x)}),[x]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);g(e),k(e),E(e)}),[k,E,c]),tabValues:c}}var h=a(6457);const g="tabList_J5MA",y="tabItem_l0OV";function b(e){var t=e.className,a=e.block,o=e.selectedValue,l=e.selectValue,u=e.tabValues,d=[],c=(0,s.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==o&&(c(t),l(n))},p=function(e){var t,a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var n,r=d.indexOf(e.currentTarget)+1;a=null!=(n=d[r])?n:d[0];break;case"ArrowLeft":var i,s=d.indexOf(e.currentTarget)-1;a=null!=(i=d[s])?i:d[d.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},u.map((function(e){var t=e.value,a=e.label,s=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return d.push(e)},onKeyDown:p,onClick:m},s,{className:(0,i.Z)("tabs__item",y,null==s?void 0:s.className,{"tabs__item--active":o===t})}),null!=a?a:t)})))}function k(e){var t=e.lazy,a=e.children,n=e.selectedValue,i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){var s=i.find((function(e){return e.props.value===n}));return s?(0,r.cloneElement)(s,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function w(e){var t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function N(e){var t=(0,h.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},4816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var n=a(5773),r=a(808),i=(a(7378),a(5318)),s=(a(3930),a(9798),["components"]),o={title:"Customizing express-validator"},l=void 0,u={unversionedId:"guides/customizing",id:"version-7.0.0/guides/customizing",title:"Customizing express-validator",description:"If the application you're building is anything but a very simple one, you'll need validators,",source:"@site/versioned_docs/version-7.0.0/guides/customizing.md",sourceDirName:"guides",slug:"/guides/customizing",permalink:"/docs/guides/customizing",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/guides/customizing.md",tags:[],version:"7.0.0",frontMatter:{title:"Customizing express-validator"},sidebar:"docs",previous:{title:"Field Selection",permalink:"/docs/guides/field-selection"},next:{title:"Manually running validations",permalink:"/docs/guides/manually-running"}},d={},c=[{value:"Custom Validators and Sanitizers",id:"custom-validators-and-sanitizers",level:2},{value:"Implementing a custom validator",id:"implementing-a-custom-validator",level:3},{value:"Implementing a custom sanitizer",id:"implementing-a-custom-sanitizer",level:3},{value:"Error Messages",id:"error-messages",level:2},{value:"Validator-level message",id:"validator-level-message",level:3},{value:"Custom validator-level message",id:"custom-validator-level-message",level:3},{value:"Field-level message",id:"field-level-message",level:3},{value:"Other error messages",id:"other-error-messages",level:3},{value:"The <code>ExpressValidator</code> class",id:"the-expressvalidator-class",level:2},{value:"Typescript support",id:"typescript-support",level:3}],m={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"If the application you're building is anything but a very simple one, you'll need validators,\nsanitizers and error messages beyond the ones built into express-validator sooner or later."),(0,i.kt)("p",null,"That's why it has a number of ways in which it can be customized, some of which are introduced on this page."),(0,i.kt)("h2",{id:"custom-validators-and-sanitizers"},"Custom Validators and Sanitizers"),(0,i.kt)("p",null,"A classic need that express-validator can't fulfill for you, and that you might run into,\nis validating whether an e-mail address is in use or not when a user signing up."),(0,i.kt)("p",null,"It's possible to do this in express-validator by implementing a custom validator."),(0,i.kt)("p",null,"Custom validators are simple functions that receive the field value and some information about it,\nand have to return a value that will determine if the field is valid or not."),(0,i.kt)("p",null,"Custom sanitizers are similar, except that they instead transform the value of the field."),(0,i.kt)("h3",{id:"implementing-a-custom-validator"},"Implementing a custom validator"),(0,i.kt)("p",null,"Custom validators must return a truthy value to indicate that the field is valid, or falsy to indicate it's invalid."),(0,i.kt)("p",null,"Custom validators can be asynchronous, in which case it can return a promise. The returned promise is awaited on, and it must resolve in order for the field to be valid. If it rejects, the field is deemed invalid."),(0,i.kt)("p",null,"If a custom validator throws, it's also considered invalid."),(0,i.kt)("p",null,"For example, in order to check that an e-mail is not in use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.post(\n  '/create-user',\n  body('email').custom(async value => {\n    const user = await UserCollection.findUserByEmail(value);\n    if (user) {\n      throw new Error('E-mail already in use');\n    }\n  }),\n  (req, res) => {\n    // Handle the request\n  },\n);\n")),(0,i.kt)("p",null,"Or maybe you could also verify that the password matches the repeat:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.post(\n  '/create-user',\n  body('password').isLength({ min: 5 }),\n  body('passwordConfirmation').custom((value, { req }) => {\n    return value === req.body.password;\n  }),\n  (req, res) => {\n    // Handle request\n  },\n);\n")),(0,i.kt)("h3",{id:"implementing-a-custom-sanitizer"},"Implementing a custom sanitizer"),(0,i.kt)("p",null,"Custom sanitizers don't have many rules. Whatever the value that they return, is the value that the field will acquire."),(0,i.kt)("p",null,"Custom sanitizers can also be asynchronous, so if they return a promise, the promise will be awaited on, and the resolved value is set on the field."),(0,i.kt)("p",null,"For example, suppose that you'd like to convert an ID from string to the ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/method/ObjectId/"},"MongoDB ObjectId")," format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { param } from 'express-validator';\nimport { ObjectId } from 'mongodb';\n\napp.post(\n  '/user/:id',\n  param('id').customSanitizer(value => ObjectId(value)),\n  (req, res) => {\n    // req.params.id is an ObjectId now\n  },\n);\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If you don't return from a custom sanitizer, your field will become ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"!")),(0,i.kt)("h2",{id:"error-messages"},"Error Messages"),(0,i.kt)("p",null,"Whenever a field value is invalid, an error message is recorded for it.",(0,i.kt)("br",null),"\nThe default error message is ",(0,i.kt)("inlineCode",{parentName:"p"},"Invalid value"),", which is not descriptive at all of what the error is,\nso you might need to customize it. There are a few ways to do that:"),(0,i.kt)("h3",{id:"validator-level-message"},"Validator-level message"),(0,i.kt)("p",null,"A validator-level message applies only when the field fails a specific validator.\nThis can be done by using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#withmessage"},(0,i.kt)("inlineCode",{parentName:"a"},".withMessage()")," method"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"body('email').isEmail().withMessage('Not a valid e-mail address');\n")),(0,i.kt)("h3",{id:"custom-validator-level-message"},"Custom validator-level message"),(0,i.kt)("p",null,"If a custom validator throws, the thrown value will be used as its error message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"body('email')\n  .isEmail()\n  .custom(async value => {\n    const existingUser = await Users.findByEmail(value);\n    if (existingUser) {\n      // Will use the below as the error message\n      throw new Error('A user already exists with this e-mail address');\n    }\n  });\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Specifying a message using ",(0,i.kt)("inlineCode",{parentName:"p"},".withMessage()")," will have precedence over the thrown value from the\ncustom validator.")),(0,i.kt)("h3",{id:"field-level-message"},"Field-level message"),(0,i.kt)("p",null,"A field-level message is set when you create the validation chain. It's used as a fallback message\nwhen a validator doesn't override its error message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"body('json_string', 'Invalid json_string')\n  // No message specified for isJSON, so use the default \"Invalid json_string\"\n  .isJSON()\n  .isLength({ max: 100 })\n  // Overrides the default message when `isLength` fails\n  .withMessage('Max length is 100 bytes');\n")),(0,i.kt)("h3",{id:"other-error-messages"},"Other error messages"),(0,i.kt)("p",null,"Some express-vaildator functions might create a different error type, and they offer a different way\nto specify an error message:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/check-exact"},(0,i.kt)("inlineCode",{parentName:"a"},"checkExact()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/api/one-of"},(0,i.kt)("inlineCode",{parentName:"a"},"oneOf()")))),(0,i.kt)("h2",{id:"the-expressvalidator-class"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"ExpressValidator")," class"),(0,i.kt)("p",null,"A useful way to reuse certain customizations is to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExpressValidator")," class."),(0,i.kt)("p",null,"It contains all the functions that you can import directly from express-validator:\n",(0,i.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"matchedData"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"oneOf"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"validationResult"),", etc, but with customizations that you specify when\ninstantiating it.",(0,i.kt)("br",null),"\nFor example, ",(0,i.kt)("a",{parentName:"p",href:"#custom-validators-and-sanitizers"},"custom validators, sanitizers"),", or\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/validation-result#errorformatter"},"error formatter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ExpressValidator } from 'express-validator';\n\nconst { body, validationResult } = new ExpressValidator(\n  {\n    isPostID: async value => {\n      // Verify if the value matches the post ID format\n    },\n  },\n  {\n    muteOffensiveWords: value => {\n      // Replace offensive words with ***\n    },\n  },\n);\n\napp.post(\n  '/forum/:post/comment',\n  param('post').isPostID(),\n  body('comment').muteOffensiveWords(),\n  (req, res) => {\n    const result = validationResult(req);\n    // Handle new post validation result\n  },\n);\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/express-validator"},"full API of ",(0,i.kt)("inlineCode",{parentName:"a"},"ExpressValidator")),".")),(0,i.kt)("h3",{id:"typescript-support"},"Typescript support"),(0,i.kt)("p",null,"A couple of custom types can be created matching exactly the type of your ",(0,i.kt)("inlineCode",{parentName:"p"},"ExpressValidator")," instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ExpressValidator, CustomValidationChain, CustomSchema } from 'express-validator';\n\nconst myExpressValidator = new ExpressValidator({ isEmailNotInUse });\nconst { body, checkSchema } = myExpressValidator;\n\ntype MyValidationChain = CustomValidationChain<typeof myExpressValidator>;\ntype MySchema = CustomSchema<typeof myExpressValidator>;\n\nconst createEmailChain = (): MyValidationChain => body('email').isEmail().isEmailNotInUse();\nconst signupSchema: MySchema = {\n  email: {\n    isEmail: true,\n    isEmailNotInUse: true,\n  },\n};\n")))}p.isMDXComponent=!0}}]);