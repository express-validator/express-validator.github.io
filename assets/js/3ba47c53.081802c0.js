"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5671],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var i=n(5773),a=n(808),r=(n(7378),n(5318)),o=["components"],s={id:"sanitization-chain-api",title:"Sanitization Chain API"},l=void 0,c={unversionedId:"sanitization-chain-api",id:"version-5.3.0/sanitization-chain-api",title:"Sanitization Chain API",description:"The sanitization chain is a middleware, and it should be passed to an Express route handler.",source:"@site/versioned_docs/version-5.3.0/api-sanitization-chain.md",sourceDirName:".",slug:"/sanitization-chain-api",permalink:"/docs/5.3.0/sanitization-chain-api",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-5.3.0/api-sanitization-chain.md",tags:[],version:"5.3.0",frontMatter:{id:"sanitization-chain-api",title:"Sanitization Chain API"},sidebar:"version-5.3.0/docs",previous:{title:"filter API",permalink:"/docs/5.3.0/filter-api"},next:{title:"Validation Chain API",permalink:"/docs/5.3.0/validation-chain-api"}},p={},u=[{value:"<code>.customSanitizer(sanitizer)</code>",id:"customsanitizersanitizer",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The sanitization chain is a middleware, and it should be passed to an Express route handler.",(0,r.kt)("br",{parentName:"p"}),"\n","When the middleware runs, it will modify each field in place, applying each of the sanitizers in the order they were specified:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', sanitizeBody('trimMe').trim(), (req, res, next) => {\n  // If req.body.trimMe was originally \"  something \",\n  // its sanitized value will be \"something\"\n  console.log(req.body.trimMe);\n});\n")),(0,r.kt)("p",null,"Any of the sanitization methods listed by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chriso/validator.js"},"validator.js")," are made available in all sanitization chains created by express-validator, as long as we're supporting the most up-to-date validator version."),(0,r.kt)("p",null,"Additionally, the following methods are also available:"),(0,r.kt)("h2",{id:"customsanitizersanitizer"},(0,r.kt)("inlineCode",{parentName:"h2"},".customSanitizer(sanitizer)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sanitizer(value, { req, location, path })"),": the custom sanitizer function.",(0,r.kt)("br",{parentName:"li"}),"Receives the value of the field being sanitized, as well as the express request, the location and the field path.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Returns:")," the current sanitization chain instance")))),(0,r.kt)("p",null,"Adds a custom sanitizer to the current sanitization chain. It must synchronously return the new value."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/object/:id', sanitizeParam('id').customSanitizer((value, { req }) => {\n  return req.query.type === 'user' ? ObjectId(value) : Number(value);\n}), objectHandler)\n")))}m.isMDXComponent=!0}}]);