"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2788],{3604:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=n(4246),o=n(1670);const s={title:"Migration from v6 to v7"},t=void 0,d={id:"migration-v6-to-v7",title:"Migration from v6 to v7",description:"The migration process from express-validator v6.x.x to v7.x.x is manual.",source:"@site/versioned_docs/version-7.0.0/migration-v6-to-v7.md",sourceDirName:".",slug:"/migration-v6-to-v7",permalink:"/docs/migration-v6-to-v7",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/migration-v6-to-v7.md",tags:[],version:"7.0.0",frontMatter:{title:"Migration from v6 to v7"},sidebar:"docs",previous:{title:"Migration from v5 to v6",permalink:"/docs/migration-v5-to-v6"}},a={},l=[{value:"Support",id:"support",level:2},{value:"Removed deprecated APIs",id:"removed-deprecated-apis",level:2},{value:"Import paths",id:"import-paths",level:3},{value:"Sanitization-only APIs",id:"sanitization-only-apis",level:3},{value:"TypeScript types",id:"typescript-types",level:3},{value:"Validators",id:"validators",level:2},{value:"<code>isObject()</code>",id:"isobject",level:3},{value:"Validation errors",id:"validation-errors",level:2},{value:"Renamed properties",id:"renamed-properties",level:3},{value:"Telling error types apart",id:"telling-error-types-apart",level:3},{value:"<code>oneOf()</code>",id:"oneof",level:2},{value:"Signature",id:"oneof-signature",level:3},{value:"Error type",id:"oneof-error-type",level:3},{value:"Other breaking changes",id:"other-breaking-changes",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"The migration process from express-validator v6.x.x to v7.x.x is manual.\nYou'll need to follow these steps after you've upgraded the package on your project."}),"\n",(0,i.jsx)(r.h2,{id:"support",children:"Support"}),"\n",(0,i.jsx)(r.p,{children:"Node 12 is no longer supported. You'll need to upgrade to Node 14 or newer."}),"\n",(0,i.jsx)(r.h2,{id:"removed-deprecated-apis",children:"Removed deprecated APIs"}),"\n",(0,i.jsx)(r.h3,{id:"import-paths",children:"Import paths"}),"\n",(0,i.jsxs)(r.p,{children:["Importing from ",(0,i.jsx)(r.code,{children:"express-validator/check"})," and ",(0,i.jsx)(r.code,{children:"express-validator/filter"})," had been deprecated since v6.0.0.\nThey are now gone from the package, and you should always import from ",(0,i.jsx)(r.code,{children:"express-validator"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"sanitization-only-apis",children:"Sanitization-only APIs"}),"\n",(0,i.jsxs)(r.p,{children:["All ",(0,i.jsx)(r.code,{children:"sanitize"})," functions have been removed, as ",(0,i.jsx)(r.code,{children:"check"})," functions offer exactly the same functionality,\nand more."]}),"\n",(0,i.jsx)(r.p,{children:"You can replace the following snippets on your codebase:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"From"}),(0,i.jsx)(r.th,{children:"To"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitize(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"check(field)"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitizeBody(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"body(field)"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitizeCookie(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"cookie(field)"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitizeHeader(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"header(field)"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitizeParam(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"param(field)"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"sanitizeQuery(field)"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"query(field)"})})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"typescript-types",children:"TypeScript types"}),"\n",(0,i.jsx)(r.p,{children:"The following types have been removed from express-validator and can be transparently replaced:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"From"}),(0,i.jsx)(r.th,{children:"To"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"ValidationParamSchema"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"ParamSchema"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Validationchema"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"Schema"})})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"validators",children:"Validators"}),"\n",(0,i.jsx)(r.h3,{id:"isobject",children:(0,i.jsx)(r.code,{children:"isObject()"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"strict"})," option, when unset, would default to ",(0,i.jsx)(r.code,{children:"false"}),", meaning that arrays and ",(0,i.jsx)(r.code,{children:"null"})," values would\npass validation. The new default value is ",(0,i.jsx)(r.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"To maintain v6.x.x behavior, the following change is necessary:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:"- check('object').isObject()\n+ check('object').isObject({ strict: false })\n"})}),"\n",(0,i.jsx)(r.h2,{id:"validation-errors",children:"Validation errors"}),"\n",(0,i.jsxs)(r.p,{children:["Validation errors used to be objects in the format ",(0,i.jsx)(r.code,{children:"{ param, msg, value, location, nestedErrors }"}),",\nwhere ",(0,i.jsx)(r.code,{children:"nestedErrors"})," is only present in errors caused by ",(0,i.jsx)(r.code,{children:"oneOf()"}),", which would also always have the\n",(0,i.jsx)(r.code,{children:"path: '_error'"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Given that there are now a couple more ",(0,i.jsx)(r.a,{href:"/docs/api/validation-result#error-types",children:"error types"}),",\na couple of changes were necessary:"]}),"\n",(0,i.jsx)(r.h3,{id:"renamed-properties",children:"Renamed properties"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"param"})," property has been renamed to ",(0,i.jsx)(r.code,{children:"path"}),", to reduce chance of confusion with the ",(0,i.jsx)(r.code,{children:"req.params"}),"\nlocation."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:"const errors = validationResult(req).array();\n- console.log(`Error on the field ${errors[0].param}`);\n+ console.log(`Error on the field ${errors[0].path}`);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"telling-error-types-apart",children:"Telling error types apart"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"ValidationError"})," type in TypeScript is now a\n",(0,i.jsx)(r.a,{href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions",children:"discriminated union"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["It might be necessary to use a ",(0,i.jsx)(r.code,{children:"switch"})," or ",(0,i.jsx)(r.code,{children:"if"})," statements to check that you're dealing with the\ntype that you want to format/debug. For example:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ts",children:"const result = validationResult(req).formatWith(error => {\n  switch (error.type) {\n    case 'field':\n      // this is a FieldValidationError\n      return `Error on field ${error.path}`;\n\n    case 'alternative':\n    case 'grouped_alternative':\n      // this is an AlternativeValidationError or GroupedAlternativeValidationError\n      console.log(error.nestedErrors);\n      return error.msg;\n\n    case 'unknown_fields':\n      // this is an UnknownFieldValidationError\n      const fields = error.fields.map(field => field.path).join(', ');\n      return `Unknown fields found, please remove them: ${fields}`;\n\n    default:\n      // Not a known type.\n      throw new Error(`Not a known express-validator error: ${error.type}`);\n  }\n});\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"note",children:(0,i.jsxs)(r.p,{children:["For the up-to-date documentation, see the ",(0,i.jsxs)(r.a,{href:"/docs/api/validation-result#validationerror",children:[(0,i.jsx)(r.code,{children:"ValidationError"})," type"]}),"."]})}),"\n",(0,i.jsx)(r.h2,{id:"oneof",children:(0,i.jsx)(r.code,{children:"oneOf()"})}),"\n",(0,i.jsx)(r.h3,{id:"oneof-signature",children:"Signature"}),"\n",(0,i.jsxs)(r.p,{children:["The signature of ",(0,i.jsx)(r.code,{children:"oneOf()"})," has changed. Its second argument used to be the message to use,\nbut now it's an object of options."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n- 'At least one contact method must be provided',\n+ { message: 'At least one contact method must be provided' }\n)\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Furthermore, if ",(0,i.jsx)(r.code,{children:"message"})," is a function, its signature has also changed to include the list of\nnested errors:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n- (req) => {\n+ {\n+   message: (nestedErrors, req) => {\n+     console.log(nestedErrors);\n      return req.translate('one_of_error'),\n  }\n)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"oneof-error-type",children:"Error type"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"oneOf()"})," used to be a bit inflexible with how it returned nested errors, which is why it now takes\nan ",(0,i.jsx)(r.code,{children:"errorType"})," option that allows extra customizations."]}),"\n",(0,i.jsx)(r.p,{children:"To maintain behavior from v6.x.x, make the following change:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-diff",children:"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n+ { errorType: 'flat' }\n)\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["Learn more on the ",(0,i.jsx)(r.a,{href:"/docs/api/one-of#error-types",children:"error types documentation"}),"."]})}),"\n",(0,i.jsx)(r.h2,{id:"other-breaking-changes",children:"Other breaking changes"}),"\n",(0,i.jsxs)(r.p,{children:["Please check ",(0,i.jsx)(r.a,{href:"https://github.com/express-validator/express-validator/releases/tag/v7.0.0",children:"express-validator v7.0.0 release notes"}),"\nto learn about other breaking changes."]})]})}function h(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1670:(e,r,n)=>{n.d(r,{Z:()=>d,a:()=>t});var i=n(7378);const o={},s=i.createContext(o);function t(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);