"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[750],{94955:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(62540),t=n(43023);const s={title:"The Validation Chain"},r=void 0,o={id:"guides/validation-chain",title:"The Validation Chain",description:"The validation chain is one of the main concepts in express-validator, therefore it's useful to learn",source:"@site/versioned_docs/version-7.3.0/guides/validation-chain.md",sourceDirName:"guides",slug:"/guides/validation-chain",permalink:"/docs/guides/validation-chain",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.3.0/guides/validation-chain.md",tags:[],version:"7.3.0",frontMatter:{title:"The Validation Chain"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/guides/getting-started"},next:{title:"Field Selection",permalink:"/docs/guides/field-selection"}},d={},l=[{value:"What are validation chains?",id:"what",level:2},{value:"Features",id:"features",level:2},{value:"Standard validators/sanitizers",id:"standard-validatorssanitizers",level:3},{value:"Chaining order",id:"chaining-order",level:2},{value:"Reusing validation chains",id:"reusing",level:2}];function h(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"The validation chain is one of the main concepts in express-validator, therefore it's useful to learn\nabout it, so that you can use it effectively."}),"\n",(0,a.jsxs)(i.p,{children:["But don't worry: if you've read through the ",(0,a.jsx)(i.a,{href:"/docs/guides/getting-started",children:"Getting Started guide"}),", you have\nalready used validation chains without even noticing!"]}),"\n",(0,a.jsx)(i.h2,{id:"what",children:"What are validation chains?"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Validation chains"})," are created by ",(0,a.jsxs)(i.a,{href:"/docs/api/check",children:["functions such as ",(0,a.jsx)(i.code,{children:"body()"}),", ",(0,a.jsx)(i.code,{children:"param()"}),", ",(0,a.jsx)(i.code,{children:"query()"}),", and so on"]}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["They have this name because they wrap the value of a field with validations (or sanitizations),\nand each of its methods returns itself.",(0,a.jsx)("br",{}),"\nThis pattern is usually called ",(0,a.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Method_chaining",children:(0,a.jsx)(i.strong,{children:"method chaining"})}),",\nhence why the name ",(0,a.jsx)(i.em,{children:"validation chain"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Validation chains not only ",(0,a.jsx)(i.a,{href:"/docs/api/validation-chain",children:"have a number of useful methods for defining validations and sanitizations"}),",\nbut they are also ",(0,a.jsx)(i.em,{children:"middleware functions"}),", meaning that they can be passed to any express.js route handler."]}),"\n",(0,a.jsx)(i.p,{children:"This is an example of how validation chains are usually used, and how you can read one:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"app.post(\n  '/newsletter',\n  // For the `email` field in `req.body`...\n  body('email')\n    // ...mark the field as optional\n    .optional()\n    // ...and when it's present, trim its value, then validate it as an email address\n    .trim()\n    .isEmail(),\n  maybeSubscribeToNewsletter,\n);\n"})}),"\n",(0,a.jsx)(i.h2,{id:"features",children:"Features"}),"\n",(0,a.jsx)(i.p,{children:"A validation chain has three kinds of methods: validators, sanitizers and modifiers."}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Validators"})," determine if the value of a request field is valid.\nThis means checking if the field is in the format that you expect it to be.\nFor example, if you're building a sign up form, your requirements could be that the username must\nbe an e-mail address, and that passwords must be at least 8 characters long."]}),"\n",(0,a.jsx)(i.p,{children:"If the value is invalid, an error is recorded for that field using some error message.\nThis validation error can then be retrieved at a later point in the route handler and returned to the user."}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Sanitizers"})," transform the field value.\nThey are useful to remove noise from the value, to cast the value to the right JavaScript type,\nand perhaps even to provide some basic line of defense against threats."]}),"\n",(0,a.jsx)(i.p,{children:"Sanitizers persist the updated field value back into the request,\nso that it's usable by other express-validator functions, your own route handler code, and even other middlewares."}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.strong,{children:"Modifiers"})," define how validation chains behave when they are run.\nThis might include adding conditions on when they should run, or even which error message a validator should have."]}),"\n",(0,a.jsx)(i.admonition,{type:"tip",children:(0,a.jsxs)(i.p,{children:["You can check out the list of methods by visiting the ",(0,a.jsxs)(i.a,{href:"/docs/api/validation-chain",children:[(0,a.jsx)(i.code,{children:"ValidationChain"})," API"]}),"."]})}),"\n",(0,a.jsx)(i.h3,{id:"standard-validatorssanitizers",children:"Standard validators/sanitizers"}),"\n",(0,a.jsxs)(i.p,{children:["Most of the functionality exposed by the validation chain actually comes from\n",(0,a.jsx)(i.a,{href:"https://github.com/validatorjs/validator.js",children:"validator.js"}),", which is a JavaScript library specialized\nin string validation."]}),"\n",(0,a.jsxs)(i.p,{children:["This includes ",(0,a.jsx)(i.em,{children:"all"})," of validator.js validators and sanitizers,\nfrom commonly used ",(0,a.jsx)(i.code,{children:"isEmail"}),", ",(0,a.jsx)(i.code,{children:"isLength"}),", and ",(0,a.jsx)(i.code,{children:"trim"})," to the more niche ",(0,a.jsx)(i.code,{children:"isISBN"}),", ",(0,a.jsx)(i.code,{children:"isMultibyte"})," and\n",(0,a.jsx)(i.code,{children:"stripLow"}),"!"]}),"\n",(0,a.jsxs)(i.p,{children:["These are called ",(0,a.jsx)(i.strong,{children:"standard validators"})," and ",(0,a.jsx)(i.strong,{children:"standard sanitizers"})," in express-validator."]}),"\n",(0,a.jsxs)(i.p,{children:["Because validator.js only works with ",(0,a.jsx)(i.em,{children:"strings"}),", express-validator will always ",(0,a.jsx)(i.strong,{children:"convert fields with a\nstandard validator/sanitizer to string first"}),".",(0,a.jsx)("br",{}),"\nNon-string values are converted according to the following table:"]}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"Date"})," objects will use the return of the ",(0,a.jsxs)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",children:[(0,a.jsx)(i.code,{children:"toISOString()"})," method"]}),";"]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.code,{children:"null"}),", ",(0,a.jsx)(i.code,{children:"undefined"})," and ",(0,a.jsx)(i.code,{children:"NaN"})," are converted to an empty string;"]}),"\n",(0,a.jsxs)(i.li,{children:["Objects which implement a custom ",(0,a.jsx)(i.code,{children:"toString()"})," will use the return of that method;"]}),"\n",(0,a.jsxs)(i.li,{children:["Other objects will use the ",(0,a.jsxs)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",children:["default ",(0,a.jsx)(i.code,{children:"toString()"})," method"]}),";"]}),"\n",(0,a.jsx)(i.li,{children:"All other values are converted into string as-is (such as booleans or numbers)."}),"\n"]}),"\n",(0,a.jsxs)(i.p,{children:["Each of an array's items is ",(0,a.jsx)(i.strong,{children:"individually"})," validated/sanitized according to these rules.",(0,a.jsx)("br",{}),"\nFor example, a validation chain ",(0,a.jsx)(i.code,{children:"body('ids').isNumber()"})," would find two errors when ",(0,a.jsx)(i.code,{children:"req.body.ids"}),"\nis ",(0,a.jsx)(i.code,{children:"[5, '33', 'abc', 'def']"}),"."]}),"\n",(0,a.jsx)(i.admonition,{type:"info",children:(0,a.jsxs)(i.p,{children:["Please report bugs in the validators/sanitizers (such as a value that shouldn't be valid but is, or\nvice versa) to ",(0,a.jsx)(i.a,{href:"https://github.com/validatorjs/validator.js",children:"validator.js"}),"."]})}),"\n",(0,a.jsx)(i.h2,{id:"chaining-order",children:"Chaining order"}),"\n",(0,a.jsxs)(i.p,{children:["The order in which you call methods on a validation chain ",(0,a.jsx)(i.em,{children:"usually"})," matters.",(0,a.jsx)("br",{}),"\nThey are almost always run in the order that they are specified, therefore you can tell what a validation\nchain will do just by reading its definition, from first chained method to last."]}),"\n",(0,a.jsx)(i.p,{children:"Take the following snippet as an example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"// Validate if search_query is not empty, then trim it\nquery('search_query').notEmpty().trim();\n"})}),"\n",(0,a.jsxs)(i.p,{children:["In this case, if the user passes a ",(0,a.jsx)(i.code,{children:"search_query"})," value that is composed of whitespaces only,\nit won't be empty, therefore the validation passes.\nBut since the ",(0,a.jsx)(i.code,{children:".trim()"})," sanitizer is there, the whitespaces will be removed, and the field will become empty,\nso you actually end up with a false positive."]}),"\n",(0,a.jsx)(i.p,{children:"Now, compare it with the below snippet:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"// Trim search_query, then validate if it's not empty\nquery('search_query').trim().notEmpty();\n"})}),"\n",(0,a.jsxs)(i.p,{children:["This chain will more sensibly remove whitespaces, ",(0,a.jsx)(i.em,{children:"and then"})," validate if the value is not empty."]}),"\n",(0,a.jsxs)(i.p,{children:["One exception to this rule is ",(0,a.jsx)(i.a,{href:"/docs/api/validation-chain#optional",children:(0,a.jsx)(i.code,{children:".optional()"})}),":\nIt can be placed at any point in the chain and it will mark the chain as optional the same way."]}),"\n",(0,a.jsx)(i.h2,{id:"reusing",children:"Reusing validation chains"}),"\n",(0,a.jsxs)(i.p,{children:["Validation chains are ",(0,a.jsx)(i.strong,{children:"mutable"}),".",(0,a.jsx)("br",{}),"\nThis means that calling methods on one will cause the original chain object to be updated,\njust like any references to it."]}),"\n",(0,a.jsx)(i.p,{children:"If you wish to reuse the same chain, it's a good idea to return them from functions:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"const createEmailChain = () => body('email').isEmail();\napp.post('/login', createEmailChain(), handleLoginRoute);\napp.post('/signup', createEmailChain().custom(checkEmailNotInUse), handleSignupRoute);\n"})}),"\n",(0,a.jsxs)(i.admonition,{type:"danger",children:[(0,a.jsxs)(i.p,{children:["Storing chains ",(0,a.jsx)(i.em,{children:"and then"})," calling methods on them might cause bugs.",(0,a.jsx)("br",{}),"\nThe following shows how the e-mail not in use validation ends up running not only for the sign-up page,\nbut also for the login page:"]}),(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"const baseEmailChain = body('email').isEmail();\napp.post('/login', baseEmailChain, handleLoginRoute);\napp.post('/signup', baseEmailChain.custom(checkEmailNotInUse), handleSignupRoute);\n"})})]})]})}function c(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},43023:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var a=n(63696);const t={},s=a.createContext(t);function r(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);