"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5206],{5318:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>v});var t=r(7378);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(r),m=a,v=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return r?t.createElement(v,o(o({ref:n},p),{},{components:r})):t.createElement(v,o({ref:n},p))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},254:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>v,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var t=r(5773),a=r(808),i=(r(7378),r(5318)),o=["components"],s={id:"running-imperatively",title:"Running validations imperatively"},l=void 0,d={unversionedId:"running-imperatively",id:"version-6.9.0/running-imperatively",title:"Running validations imperatively",description:"express-validator favors the declarative way of doing things that express middlewares bring.",source:"@site/versioned_docs/version-6.9.0/feature-running-imperatively.md",sourceDirName:".",slug:"/running-imperatively",permalink:"/docs/6.9.0/running-imperatively",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-6.9.0/feature-running-imperatively.md",tags:[],version:"6.9.0",frontMatter:{id:"running-imperatively",title:"Running validations imperatively"},sidebar:"version-6.9.0/docs",previous:{title:"Whole Body Validation",permalink:"/docs/6.9.0/whole-body-validation"},next:{title:"Validation middlewares",permalink:"/docs/6.9.0/check-api"}},p={},c=[{value:"Example: standardized validation error response",id:"example-standardized-validation-error-response",level:2},{value:"Example: validating with a condition",id:"example-validating-with-a-condition",level:2}],u={toc:c},m="wrapper";function v(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.kt)(m,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"express-validator favors the declarative way of doing things that express middlewares bring.\nThis means most of the APIs ",(0,i.kt)("em",{parentName:"p"},"look and work better")," when simply passed into an express route handler."),(0,i.kt)("p",null,"You can, however, give control of running these validations to your own middleware/route handler.",(0,i.kt)("br",{parentName:"p"}),"\n","This is possible with the use of the declarative method ",(0,i.kt)("inlineCode",{parentName:"p"},"run(req)"),", available on both\n",(0,i.kt)("a",{parentName:"p",href:"/docs/6.9.0/validation-chain-api#runreq-options"},"validation chain")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/6.9.0/sanitization-chain-api#runreq"},"sanitization chains"),"."),(0,i.kt)("p",null,"Check the examples below to understand how this method can help you:"),(0,i.kt)("h2",{id:"example-standardized-validation-error-response"},"Example: standardized validation error response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// can be reused by many routes\n\n// parallel processing\nconst validate = validations => {\n  return async (req, res, next) => {\n    await Promise.all(validations.map(validation => validation.run(req)));\n\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      return next();\n    }\n\n    res.status(400).json({ errors: errors.array() });\n  };\n};\n\n// sequential processing, stops running validations chain if the previous one have failed.\nconst validate = validations => {\n  return async (req, res, next) => {\n    for (let validation of validations) {\n      const result = await validation.run(req);\n      if (result.errors.length) break;\n    }\n\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      return next();\n    }\n\n    res.status(400).json({ errors: errors.array() });\n  };\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.post('/api/create-user', validate([\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n]), async (req, res, next) => {\n  // request is guaranteed to not have any validation errors.\n  const user = await User.create({ ... });\n});\n")),(0,i.kt)("h2",{id:"example-validating-with-a-condition"},"Example: validating with a condition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.post(\n  '/update-settings',\n  body('email').isEmail(),\n  body('password').optional().isLength({ min: 6 }),\n  async (req, res, next) => {\n    // if a password has been provided, then a confirmation must also be provided.\n    if (req.body.password) {\n      await body('passwordConfirmation')\n        .equals(req.body.password)\n        .withMessage('passwords do not match')\n        .run(req);\n    }\n\n    // Check the validation errors, and update the user's settings.\n  },\n);\n")))}v.isMDXComponent=!0}}]);