"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1981],{5318:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7378);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=o,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},803:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=a(5773),o=a(808),r=(a(7378),a(5318)),i=["components"],s={title:"matchedData"},l="matchedData()",p={unversionedId:"api/matched-data",id:"api/matched-data",title:"matchedData",description:"matchedData()",source:"@site/../docs/api/matched-data.md",sourceDirName:"api",slug:"/api/matched-data",permalink:"/docs/next/api/matched-data",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/../docs/api/matched-data.md",tags:[],version:"current",frontMatter:{title:"matchedData"},sidebar:"api",previous:{title:"ExpressValidator",permalink:"/docs/next/api/express-validator"},next:{title:"Errors and Validation Results",permalink:"/docs/next/api/validation-result"}},d={},c=[{value:"<code>matchedData()</code>",id:"matcheddata",level:2},{value:"With optional data",id:"with-optional-data",level:3},{value:"With invalid data",id:"with-invalid-data",level:3},{value:"Selecting data from specific locations",id:"selecting-data-from-specific-locations",level:3},{value:"Typescript usage",id:"typescript-usage",level:3}],m={toc:c};function u(e){var t=e.components,a=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"matcheddata"},(0,r.kt)("inlineCode",{parentName:"h1"},"matchedData()")),(0,r.kt)("h2",{id:"matcheddata"},(0,r.kt)("inlineCode",{parentName:"h2"},"matchedData()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { matchedData } from 'express-validator';\nmatchedData(req, options?: {\n  includeOptionals?: boolean,\n  onlyValidData?: boolean,\n  locations?: Location[],\n})\n")),(0,r.kt)("p",null,"Extracts data validated and/or sanitized by express-validator from the request, and returns an object\nwith them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"app.post(\n  '/contact-us',\n  [body('email').isEmail(), body('message').notEmpty(), body('phone').optional().isMobilePhone()],\n  (req, res) => {\n    const result = validationResult(req);\n    if (!result.isEmpty()) {\n      // handle validation errors\n      return res.send('Please fix the request');\n    }\n\n    const data = matchedData(req);\n    // If phone isn't set:\n    // => { email: 'foo@bar.com', message: 'Hi hello' }\n    // If phone is set:\n    // => { email: 'foo@bar.com', message: 'Hi hello', phone: '+1223334444' }\n  },\n);\n")),(0,r.kt)("h3",{id:"with-optional-data"},"With optional data"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"matchedData")," doesn't return data that is optional and wasn't present in the request.",(0,r.kt)("br",null),"\nYou can set ",(0,r.kt)("inlineCode",{parentName:"p"},"options.includeOptionals")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to change this behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"app.post(\n  '/contact-us',\n  [body('email').isEmail(), body('message').notEmpty(), body('phone').optional().isMobilePhone()],\n  (req, res) => {\n    const data = matchedData(req, { includeOptionals: true });\n    // If phone isn't set:\n    // => { email: 'foo@bar.com', message: 'Hi hello', phone: undefined }\n  },\n);\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/api/validation-chain#optional"},"documentation on ",(0,r.kt)("inlineCode",{parentName:"a"},".optional()"))," to learn more.")),(0,r.kt)("h3",{id:"with-invalid-data"},"With invalid data"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"matchedData")," return only data that is valid; that is, if the request contains invalid data,\nit's omitted from the result.",(0,r.kt)("br",null),"\nYou can set ",(0,r.kt)("inlineCode",{parentName:"p"},"options.onlyValidData")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to change this behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"app.post('/signup', body('email').isEmail(), body('password').notEmpty(), (req, res) => {\n  const data = matchedData(req, { onlyValidData: false });\n  // => { email: 'not_actually_an_email', password: '' }\n});\n")),(0,r.kt)("h3",{id:"selecting-data-from-specific-locations"},"Selecting data from specific locations"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"matchedData")," selects data validated on all of request's locations.\nYou can change this behavior by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"options.locations")," to a list of the locations which you wish\nto select data from:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"app.post(\n  '/signup',\n  [body('email').isEmail(), body('password').notEmpty(), query('subscribe_newsletter').isBoolean()],\n  (req, res) => {\n    const data = matchedData(req);\n    // => { email: 'foo@bar.com', password: '12345', subscribe_newsletter: true }\n\n    const data2 = matchedData(req, { locations: ['query'] });\n    // => { subscribe_newsletter: true }\n  },\n);\n")),(0,r.kt)("h3",{id:"typescript-usage"},"Typescript usage"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"matchedData")," function signature accepts passing a ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/generics.html"},"Generic Type")," as the return type."),(0,r.kt)("p",null,"The default type is ",(0,r.kt)("inlineCode",{parentName:"p"},"Record<string, any>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { matchedData } from 'express-validator';\n\napp.post(\n  '/contact-us',\n  [body('email').isEmail(), body('message').notEmpty(), body('phone').optional().isMobilePhone()],\n  (req, res) => {\n    const result = validationResult(req);\n    if (!result.isEmpty()) {\n      // handle validation errors\n      return res.send('Please fix the request');\n    }\n\n    const result = matchedData<{\n      email: string;\n      message: string;\n      phone?: string;\n    }>(req);\n  },\n);\n")))}u.isMDXComponent=!0}}]);