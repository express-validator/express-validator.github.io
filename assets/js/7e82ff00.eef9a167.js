"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6971],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=a,k=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2126:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var r=n(5773),a=n(808),o=(n(7378),n(5318)),i=["components"],l={title:"Migration from v6 to v7"},p=void 0,d={unversionedId:"migration-v6-to-v7",id:"migration-v6-to-v7",title:"Migration from v6 to v7",description:"The migration process from express-validator v6.x.x to v7.x.x is manual.",source:"@site/../docs/migration-v6-to-v7.md",sourceDirName:".",slug:"/migration-v6-to-v7",permalink:"/docs/next/migration-v6-to-v7",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/../docs/migration-v6-to-v7.md",tags:[],version:"current",frontMatter:{title:"Migration from v6 to v7"},sidebar:"docs",previous:{title:"Migration from v5 to v6",permalink:"/docs/next/migration-v5-to-v6"}},s={},m=[{value:"Support",id:"support",level:2},{value:"Removed deprecated APIs",id:"removed-deprecated-apis",level:2},{value:"Import paths",id:"import-paths",level:3},{value:"Sanitization-only APIs",id:"sanitization-only-apis",level:3},{value:"TypeScript types",id:"typescript-types",level:3},{value:"Validators",id:"validators",level:2},{value:"<code>isObject()</code>",id:"isobject",level:3},{value:"Validation errors",id:"validation-errors",level:2},{value:"Renamed properties",id:"renamed-properties",level:3},{value:"Telling error types apart",id:"telling-error-types-apart",level:3},{value:"<code>oneOf()</code>",id:"oneof",level:2},{value:"Signature",id:"oneof-signature",level:3},{value:"Error type",id:"oneof-error-type",level:3},{value:"Other breaking changes",id:"other-breaking-changes",level:2}],c={toc:m};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The migration process from express-validator v6.x.x to v7.x.x is manual.\nYou'll need to follow these steps after you've upgraded the package on your project."),(0,o.kt)("h2",{id:"support"},"Support"),(0,o.kt)("p",null,"Node 12 is no longer supported. You'll need to upgrade to Node 14 or newer."),(0,o.kt)("h2",{id:"removed-deprecated-apis"},"Removed deprecated APIs"),(0,o.kt)("h3",{id:"import-paths"},"Import paths"),(0,o.kt)("p",null,"Importing from ",(0,o.kt)("inlineCode",{parentName:"p"},"express-validator/check")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"express-validator/filter")," had been deprecated since v6.0.0.\nThey are now gone from the package, and you should always import from ",(0,o.kt)("inlineCode",{parentName:"p"},"express-validator"),"."),(0,o.kt)("h3",{id:"sanitization-only-apis"},"Sanitization-only APIs"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"sanitize")," functions have been removed, as ",(0,o.kt)("inlineCode",{parentName:"p"},"check")," functions offer exactly the same functionality,\nand more."),(0,o.kt)("p",null,"You can replace the following snippets on your codebase:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"From"),(0,o.kt)("th",{parentName:"tr",align:null},"To"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitize(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"check(field)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitizeBody(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"body(field)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitizeCookie(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"cookie(field)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitizeHeader(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"header(field)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitizeParam(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"param(field)"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sanitizeQuery(field)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"query(field)"))))),(0,o.kt)("h3",{id:"typescript-types"},"TypeScript types"),(0,o.kt)("p",null,"The following types have been removed from express-validator and can be transparently replaced:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"From"),(0,o.kt)("th",{parentName:"tr",align:null},"To"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ValidationParamSchema")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ParamSchema"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Validationchema")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Schema"))))),(0,o.kt)("h2",{id:"validators"},"Validators"),(0,o.kt)("h3",{id:"isobject"},(0,o.kt)("inlineCode",{parentName:"h3"},"isObject()")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"strict")," option, when unset, would default to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", meaning that arrays and ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," values would\npass validation. The new default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,"To maintain v6.x.x behavior, the following change is necessary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- check('object').isObject()\n+ check('object').isObject({ strict: false })\n")),(0,o.kt)("h2",{id:"validation-errors"},"Validation errors"),(0,o.kt)("p",null,"Validation errors used to be objects in the format ",(0,o.kt)("inlineCode",{parentName:"p"},"{ param, msg, value, location, nestedErrors }"),",\nwhere ",(0,o.kt)("inlineCode",{parentName:"p"},"nestedErrors")," is only present in errors caused by ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()"),", which would also always have the\n",(0,o.kt)("inlineCode",{parentName:"p"},"path: '_error'"),"."),(0,o.kt)("p",null,"Given that there are now a couple more ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/validation-result#error-types"},"error types"),",\na couple of changes were necessary:"),(0,o.kt)("h3",{id:"renamed-properties"},"Renamed properties"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"param")," property has been renamed to ",(0,o.kt)("inlineCode",{parentName:"p"},"path"),", to reduce chance of confusion with the ",(0,o.kt)("inlineCode",{parentName:"p"},"req.params"),"\nlocation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"const errors = validationResult(req).array();\n- console.log(`Error on the field ${errors[0].param}`);\n+ console.log(`Error on the field ${errors[0].path}`);\n")),(0,o.kt)("h3",{id:"telling-error-types-apart"},"Telling error types apart"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ValidationError")," type in TypeScript is now a\n",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions"},"discriminated union"),"."),(0,o.kt)("p",null,"It might be necessary to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"switch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statements to check that you're dealing with the\ntype that you want to format/debug. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const result = validationResult(req).formatWith(error => {\n  switch (error.type) {\n    case 'field':\n      // this is a FieldValidationError\n      return `Error on field ${error.path}`;\n\n    case 'alternative':\n    case 'grouped_alternative':\n      // this is an AlternativeValidationError or GroupedAlternativeValidationError\n      console.log(error.nestedErrors);\n      return error.msg;\n\n    case 'unknown_fields':\n      // this is an UnknownFieldValidationError\n      const fields = error.fields.map(field => field.path).join(', ');\n      return `Unknown fields found, please remove them: ${fields}`;\n\n    default:\n      // Not a known type.\n      throw new Error(`Not a known express-validator error: ${error.type}`);\n  }\n});\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For the up-to-date documentation, see the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/validation-result#validationerror"},(0,o.kt)("inlineCode",{parentName:"a"},"ValidationError")," type"),".")),(0,o.kt)("h2",{id:"oneof"},(0,o.kt)("inlineCode",{parentName:"h2"},"oneOf()")),(0,o.kt)("h3",{id:"oneof-signature"},"Signature"),(0,o.kt)("p",null,"The signature of ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," has changed. Its second argument used to be the message to use,\nbut now it's an object of options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n- 'At least one contact method must be provided',\n+ { message: 'At least one contact method must be provided' }\n)\n")),(0,o.kt)("p",null,"Furthermore, if ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," is a function, its signature has also changed to include the list of\nnested errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n- (req) => {\n+ {\n+   message: (nestedErrors, req) => {\n+     console.log(nestedErrors);\n      return req.translate('one_of_error'),\n  }\n)\n")),(0,o.kt)("h3",{id:"oneof-error-type"},"Error type"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," used to be a bit inflexible with how it returned nested errors, which is why it now takes\nan ",(0,o.kt)("inlineCode",{parentName:"p"},"errorType")," option that allows extra customizations."),(0,o.kt)("p",null,"To maintain behavior from v6.x.x, make the following change:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"oneOf(\n  [check('email').isEmail(), check('phone').isMobilePhone()],\n+ { errorType: 'flat' }\n)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Learn more on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/one-of#error-types"},"error types documentation"),".")),(0,o.kt)("h2",{id:"other-breaking-changes"},"Other breaking changes"),(0,o.kt)("p",null,"Please check ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/express-validator/express-validator/releases/tag/v7.0.0"},"express-validator v7.0.0 release notes"),"\nto learn about other breaking changes."))}u.isMDXComponent=!0}}]);