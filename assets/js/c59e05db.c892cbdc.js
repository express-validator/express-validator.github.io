"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6129],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2562:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var r=n(5773),a=n(808),i=(n(7378),n(5318)),o=["components"],l={title:"Miscellaneous"},s=void 0,c={unversionedId:"api/misc",id:"version-7.0.0/api/misc",title:"Miscellaneous",description:"buildCheckFunction()",source:"@site/versioned_docs/version-7.0.0/api/misc.md",sourceDirName:"api",slug:"/api/misc",permalink:"/docs/api/misc",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/api/misc.md",tags:[],version:"7.0.0",frontMatter:{title:"Miscellaneous"},sidebar:"api",previous:{title:"Errors and Validation Results",permalink:"/docs/api/validation-result"}},p={},u=[{value:"<code>buildCheckFunction()</code>",id:"buildcheckfunction",level:2},{value:"TypeScript types",id:"typescript-types",level:2},{value:"<code>ContextRunner</code>",id:"contextrunner",level:3},{value:"<code>Location</code>",id:"location",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"buildcheckfunction"},(0,i.kt)("inlineCode",{parentName:"h2"},"buildCheckFunction()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { buildCheckFunction } from 'express-validator';\nbuildCheckFunction(locations: Location[]): (\n  fields?: string | string[],\n  message?: FieldMessageFactory | ErrorMessage,\n) => ValidationChain\n")),(0,i.kt)("p",null,"Creates a variant of the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/check"},(0,i.kt)("inlineCode",{parentName:"a"},"check()")," function")," that checks only the given ",(0,i.kt)("a",{parentName:"p",href:"#location"},"request locations"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const bodyOrQuery = buildCheckFunction(['body', 'query']);\napp.put(\n  '/update-product',\n  // id must be either in req.body or req.query, and must be an UUID\n  bodyOrQuery('id').isUUID(),\n  productUpdateHandler,\n);\n")),(0,i.kt)("h2",{id:"typescript-types"},"TypeScript types"),(0,i.kt)("h3",{id:"contextrunner"},(0,i.kt)("inlineCode",{parentName:"h3"},"ContextRunner")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface ContextRunner {\n  run(req: Request, options?: { dryRun: boolean }): Promise<Result>;\n}\n")),(0,i.kt)("p",null,"Interface implemented by all middlewares which run some sort of validation/sanitization."),(0,i.kt)("p",null,"Returns a promise for a ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/validation-result#result"},(0,i.kt)("inlineCode",{parentName:"a"},"Result"))," exclusive to that validation\nchain/middleware."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { check } from 'express-validator';\napp.post('/recover-password', (req, res) => {\n  const result = await check('username').notEmpty().run(req);\n  if (!result.isEmpty()) {\n    return res.send('Something is wrong with the username.');\n  }\n});\n")),(0,i.kt)("p",null,"By default, the validation and sanitization results are persisted back into ",(0,i.kt)("inlineCode",{parentName:"p"},"req"),", which means that"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"calling ",(0,i.kt)("inlineCode",{parentName:"li"},"validationResult(req)")," will include the results for this validation"),(0,i.kt)("li",{parentName:"ul"},"a sanitized field wil be updated on the request, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"body('message').trim()")," will update ",(0,i.kt)("inlineCode",{parentName:"li"},"req.body.message"),".")),(0,i.kt)("p",null,"This behavior can be changed by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"options.dryRun")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", which will simply run the validations\nand return the result."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { check } from 'express-validator';\napp.post('/login', (req, res) => {\n  const usernameResult = await check('username').notEmpty().run(req, { dryRun: true });\n  const passwordResult = await check('password').notEmpty().run(req, { dryRun: false });\n  const result = validationResult(req);\n  // `result` won't include errors from `usernameResult`,\n  // but will include those from `passwordResult`\n});\n")),(0,i.kt)("h3",{id:"location"},(0,i.kt)("inlineCode",{parentName:"h3"},"Location")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Location = 'body' | 'cookies' | 'headers' | 'params' | 'query';\n")),(0,i.kt)("p",null,"Represents one of the request locations: ",(0,i.kt)("inlineCode",{parentName:"p"},"req.body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"req.cookies"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"req.headers"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"req.params")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"req.query"),"."))}m.isMDXComponent=!0}}]);