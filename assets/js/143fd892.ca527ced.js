"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2116],{5318:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=a,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return t?r.createElement(h,i(i({ref:n},d),{},{components:t})):r.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5857:(e,n,t)=>{t.d(n,{Kv:()=>s,Y$:()=>l,$L:()=>i,yV:()=>p});var r=t(7378);const a="example_yN0T",o="exampleTitle_uU28";var i=function(e){var n=e.children;return r.createElement("div",{className:a},n)},l=function(e){var n=e.title,t=e.children;return r.createElement("div",null,r.createElement("strong",{className:o},n),t)};function p(e){var n=e.children;return r.createElement("div",null,r.createElement("strong",{className:o},"Usage example"),n)}function s(e){var n=e.children;return r.createElement("div",null,r.createElement("strong",{className:o},"Error example"),n)}},5936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>p,metadata:()=>d,toc:()=>c});var r=t(5773),a=t(808),o=(t(7378),t(5318)),i=t(5857),l=["components"],p={title:"oneOf"},s="oneOf()",d={unversionedId:"api/one-of",id:"api/one-of",title:"oneOf",description:"oneOf()",source:"@site/../docs/api/one-of.md",sourceDirName:"api",slug:"/api/one-of",permalink:"/docs/next/api/one-of",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/../docs/api/one-of.md",tags:[],version:"current",frontMatter:{title:"oneOf"},sidebar:"api",previous:{title:"checkSchema",permalink:"/docs/next/api/check-schema"},next:{title:"ValidationChain",permalink:"/docs/next/api/validation-chain"}},m={},c=[{value:"<code>oneOf()</code>",id:"oneof-1",level:2},{value:"Example: List of validation chains",id:"example-list-of-validation-chains",level:3},{value:"Example: Grouped validation chains",id:"example-grouped-validation-chains",level:3},{value:"Error types",id:"error-types",level:2},{value:"<code>grouped</code>",id:"error-type-grouped",level:3},{value:"<code>least_errored</code>",id:"error-type-least-errored",level:3},{value:"<code>flat</code>",id:"error-type-flat",level:3},{value:"<code>AlternativeMessageFactory</code>",id:"alternativemessagefactory",level:2},{value:"<code>GroupedAlternativeMessageFactory</code>",id:"groupedalternativemessagefactory",level:2}],u={toc:c};function h(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"oneof"},(0,o.kt)("inlineCode",{parentName:"h1"},"oneOf()")),(0,o.kt)("h2",{id:"oneof-1"},(0,o.kt)("inlineCode",{parentName:"h2"},"oneOf()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  chains: (ValidationChain | ValidationChain[])[],\n  options?: { message?: any, errorType?: 'grouped' | 'least_errored' | 'flat' }\n): Middleware & ContextRunner\n")),(0,o.kt)("p",null,"Creates a middleware to ensure that at least one of the given validation chain groups are valid."),(0,o.kt)("p",null,"If none of the validation chain groups are valid, a validation error is added to the request.\nThe error that is added depends on the ",(0,o.kt)("inlineCode",{parentName:"p"},"errorType")," option, though; check out ",(0,o.kt)("a",{parentName:"p",href:"#error-types"},"error types"),"\nto understand how it works."),(0,o.kt)("h3",{id:"example-list-of-validation-chains"},"Example: List of validation chains"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," can take a list of validation chains.\nIn the following example, if either the e-mail or the phone number pass validation but the other one\ndoesn't, there won't be validation errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { body, oneOf } from 'express-validator';\n\napp.post(\n  '/contact-us',\n  body('message').notEmpty(),\n  oneOf([body('phone_number').isMobilePhone(), body('email').isEmail()], {\n    message: 'At least one valid contact method must be provided',\n  }),\n  (req, res) => {\n    // Handle request\n  },\n);\n")),(0,o.kt)("h3",{id:"example-grouped-validation-chains"},"Example: Grouped validation chains"),(0,o.kt)("p",null,"It's also possible to have groups of validation chains be validated as a unit.\nThis is helpful if you have a bunch of fields that work together be a single alternative."),(0,o.kt)("p",null,"In the following example, all of the credit card fields must pass, otherwise the user needs to provide\na valid Paypal account or an Ethereum wallet to have a payment method in their account:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { body, oneOf } from 'express-validator';\n\napp.post(\n  '/add-payment-method',\n  oneOf(\n    [\n      body('eth_wallet').isEthereumAddress(),\n      body('paypal').isEmail(),\n      [\n        body('credit_card.number').isCreditCard(),\n        body('credit_card.expiry').isDate(),\n        body('credit_card.cvv').isNumeric(),\n      ],\n    ],\n    { message: 'At least one valid refund method must be provided' },\n  ),\n  (req, res) => {\n    // Handle request\n  },\n);\n")),(0,o.kt)("h2",{id:"error-types"},"Error types"),(0,o.kt)("p",null,"Following are the possible values for ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"options.errorType"),", and their behavior.\nIf one is not provided, it defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"grouped"),"."),(0,o.kt)("h3",{id:"error-type-grouped"},(0,o.kt)("inlineCode",{parentName:"h3"},"grouped")),(0,o.kt)("p",null,"Sets ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," to add a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/validation-result#groupedalternativevalidationerror"},(0,o.kt)("inlineCode",{parentName:"a"},"GroupedAlternativeValidationError")," error"),"\nwhen none of the validation chain groups are valid.",(0,o.kt)("br",{parentName:"p"}),"\n","The error's ",(0,o.kt)("inlineCode",{parentName:"p"},"nestedErrors")," property includes all errors from every validation chain passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()"),",\ngrouped by their respective validation chain groups."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"options.message")," is a function, then it must be a ",(0,o.kt)("a",{parentName:"p",href:"#groupedalternativemessagefactory"},(0,o.kt)("inlineCode",{parentName:"a"},"GroupedAlternativeMessageFactory")),"."),(0,o.kt)(i.$L,{mdxType:"SideBySideExample"},(0,o.kt)(i.yV,{mdxType:"UsageExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  [\n    body('phone_number').isMobilePhone(),\n    body('email').isEmail(), //\n  ],\n  {\n    errorType: 'grouped',\n  },\n);\n"))),(0,o.kt)(i.Kv,{mdxType:"ErrorExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "alternative_grouped",\n  "msg": "Invalid value(s)",\n  "nestedErrors": [\n    [{ "type": "field", "path": "phone_number" /* etc */ }],\n    [{ "type": "field", "path": "email" /* etc */ }]\n  ]\n}\n')))),(0,o.kt)("h3",{id:"error-type-least-errored"},(0,o.kt)("inlineCode",{parentName:"h3"},"least_errored")),(0,o.kt)("p",null,"Sets ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," to add a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/validation-result#groupedalternativevalidationerror"},(0,o.kt)("inlineCode",{parentName:"a"},"AlternativeValidationError")," error"),"\nwhen none of the validation chain groups are valid.",(0,o.kt)("br",{parentName:"p"}),"\n","The error's ",(0,o.kt)("inlineCode",{parentName:"p"},"nestedErrors")," property includes all errors from the validation chain group that had the\nleast errors."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"options.message")," is a function, then it must be an ",(0,o.kt)("a",{parentName:"p",href:"#alternativemessagefactory"},(0,o.kt)("inlineCode",{parentName:"a"},"AlternativeMessageFactory")),"."),(0,o.kt)(i.$L,{mdxType:"SideBySideExample"},(0,o.kt)(i.yV,{mdxType:"UsageExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  [\n    body('eth_wallet').isEthereumAddress(),\n    body('paypal').isEmail(),\n    [\n      body('credit_card.number').isCreditCard(),\n      body('credit_card.expiry').isDate(),\n      body('credit_card.cvv').isNumeric(),\n    ],\n  ],\n  { errorType: 'least_errored' },\n);\n"))),(0,o.kt)(i.Kv,{mdxType:"ErrorExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "alternative",\n  "msg": "Invalid value(s)",\n  "nestedErrors": [\n    {\n      "type": "field",\n      "path": "eth_wallet" /* etc */\n    }\n  ]\n}\n')))),(0,o.kt)("h3",{id:"error-type-flat"},(0,o.kt)("inlineCode",{parentName:"h3"},"flat")),(0,o.kt)("p",null,"Sets ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," to add a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/validation-result#groupedalternativevalidationerror"},(0,o.kt)("inlineCode",{parentName:"a"},"AlternativeValidationError")," error"),"\nwhen none of the validation chain groups are valid.",(0,o.kt)("br",{parentName:"p"}),"\n","The error's ",(0,o.kt)("inlineCode",{parentName:"p"},"nestedErrors")," property is a list of all errors from every validation chains passed to\n",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()"),"."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"options.message")," is a function, then it must be an ",(0,o.kt)("a",{parentName:"p",href:"#alternativemessagefactory"},(0,o.kt)("inlineCode",{parentName:"a"},"AlternativeMessageFactory")),"."),(0,o.kt)(i.$L,{mdxType:"SideBySideExample"},(0,o.kt)(i.yV,{mdxType:"UsageExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  [\n    body('eth_wallet').isEthereumAddress(),\n    body('paypal').isEmail(),\n    [\n      body('credit_card.number').isCreditCard(),\n      body('credit_card.expiry').isDate(),\n      body('credit_card.cvv').isNumeric(),\n    ],\n  ],\n  { errorType: 'flat' },\n);\n"))),(0,o.kt)(i.Kv,{mdxType:"ErrorExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "alternative",\n  "msg": "Invalid value(s)",\n  "nestedErrors": [\n    { "type": "field", "path": "eth_wallet" /* etc */ },\n    { "type": "field", "path": "paypal" /* etc */ }\n    // ...and so on for other fields\n  ]\n}\n')))),(0,o.kt)("h2",{id:"alternativemessagefactory"},(0,o.kt)("inlineCode",{parentName:"h2"},"AlternativeMessageFactory")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type AlternativeMessageFactory = (\n  nestedErrors: FieldValidationError[],\n  options: { req: Request },\n) => any;\n")),(0,o.kt)("p",null,"The message factory type used when the ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," error type is ",(0,o.kt)("a",{parentName:"p",href:"#error-type-least-errored"},(0,o.kt)("inlineCode",{parentName:"a"},"least_errored")),"\nor ",(0,o.kt)("a",{parentName:"p",href:"#error-type-flat"},(0,o.kt)("inlineCode",{parentName:"a"},"flat")),"."),(0,o.kt)(i.$L,{mdxType:"SideBySideExample"},(0,o.kt)(i.yV,{mdxType:"UsageExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  [\n    body('phone_number').isMobilePhone(),\n    body('email').isEmail(), //\n  ],\n  {\n    errorType: 'flat',\n    message: nestedErrors => {\n      const count = nestedErrors.length;\n      return `There have been ${count} errors`;\n    },\n  },\n);\n"))),(0,o.kt)(i.Kv,{mdxType:"ErrorExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "alternative",\n  "msg": "There have been 2 errors",\n  "nestedErrors": [\n    { "type": "field", "path": "phone_number" /* etc */ },\n    { "type": "field", "path": "email" /* etc */ }\n  ]\n}\n')))),(0,o.kt)("h2",{id:"groupedalternativemessagefactory"},(0,o.kt)("inlineCode",{parentName:"h2"},"GroupedAlternativeMessageFactory")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type AlternativeMessageFactory = (\n  nestedErrors: FieldValidationError[][],\n  options: { req: Request },\n) => any;\n")),(0,o.kt)("p",null,"The message factory type used when the ",(0,o.kt)("inlineCode",{parentName:"p"},"oneOf()")," ",(0,o.kt)("a",{parentName:"p",href:"#error-type-grouped"},"error type is ",(0,o.kt)("inlineCode",{parentName:"a"},"grouped")),"."),(0,o.kt)(i.$L,{mdxType:"SideBySideExample"},(0,o.kt)(i.yV,{mdxType:"UsageExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"oneOf(\n  [\n    body('phone_number').isMobilePhone(),\n    body('email').isEmail(), //\n  ],\n  {\n    errorType: 'grouped',\n    message: nestedErrors => {\n      const count = nestedErrors.reduce((total, group) => total + group.length, 0);\n      return `There have been ${count} errors`;\n    },\n  },\n);\n"))),(0,o.kt)(i.Kv,{mdxType:"ErrorExample"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "alternative_grouped",\n  "msg": "There have been 2 errors",\n  "nestedErrors": [\n    [{ "type": "field", "path": "phone_number" /* etc */ }],\n    [{ "type": "field", "path": "email" /* etc */ }]\n  ]\n}\n')))))}h.isMDXComponent=!0}}]);