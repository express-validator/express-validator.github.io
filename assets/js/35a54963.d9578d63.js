"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8245],{5287:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=t(4246),o=t(1670);const i={title:"matchedData"},s="matchedData()",d={id:"api/matched-data",title:"matchedData",description:"matchedData()",source:"@site/versioned_docs/version-7.0.0/api/matched-data.md",sourceDirName:"api",slug:"/api/matched-data",permalink:"/docs/api/matched-data",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/api/matched-data.md",tags:[],version:"7.0.0",frontMatter:{title:"matchedData"},sidebar:"api",previous:{title:"ExpressValidator",permalink:"/docs/api/express-validator"},next:{title:"Errors and Validation Results",permalink:"/docs/api/validation-result"}},c={},l=[{value:"<code>matchedData()</code>",id:"matcheddata",level:2},{value:"With optional data",id:"with-optional-data",level:3},{value:"With invalid data",id:"with-invalid-data",level:3},{value:"Selecting data from specific locations",id:"selecting-data-from-specific-locations",level:3}];function r(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"matcheddata",children:(0,n.jsx)(a.code,{children:"matchedData()"})}),"\n",(0,n.jsx)(a.h2,{id:"matcheddata",children:(0,n.jsx)(a.code,{children:"matchedData()"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ts",children:"import { matchedData } from 'express-validator';\nmatchedData(req, options?: {\n  includeOptionals?: boolean,\n  onlyValidData?: boolean,\n  locations?: Location[],\n})\n"})}),"\n",(0,n.jsx)(a.p,{children:"Extracts data validated and/or sanitized by express-validator from the request, and returns an object\nwith them."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ts",children:"app.post(\n  '/contact-us',\n  [body('email').isEmail(), body('message').notEmpty(), body('phone').optional().isMobilePhone()],\n  (req, res) => {\n    const result = validationResult(req);\n    if (!result.isEmpty()) {\n      // handle validation errors\n      return res.send('Please fix the request');\n    }\n\n    const data = matchedData(req);\n    // If phone isn't set:\n    // => { email: 'foo@bar.com', message: 'Hi hello' }\n    // If phone is set:\n    // => { email: 'foo@bar.com', message: 'Hi hello', phone: '+1223334444' }\n  },\n);\n"})}),"\n",(0,n.jsx)(a.h3,{id:"with-optional-data",children:"With optional data"}),"\n",(0,n.jsxs)(a.p,{children:["By default, ",(0,n.jsx)(a.code,{children:"matchedData"})," doesn't return data that is optional and wasn't present in the request.",(0,n.jsx)("br",{}),"\nYou can set ",(0,n.jsx)(a.code,{children:"options.includeOptionals"})," to ",(0,n.jsx)(a.code,{children:"true"})," to change this behavior."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ts",children:"app.post(\n  '/contact-us',\n  [body('email').isEmail(), body('message').notEmpty(), body('phone').optional().isMobilePhone()],\n  (req, res) => {\n    const data = matchedData(req, { includeOptionals: true });\n    // If phone isn't set:\n    // => { email: 'foo@bar.com', message: 'Hi hello', phone: undefined }\n  },\n);\n"})}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsxs)(a.p,{children:["See the ",(0,n.jsxs)(a.a,{href:"/docs/api/validation-chain#optional",children:["documentation on ",(0,n.jsx)(a.code,{children:".optional()"})]})," to learn more."]})}),"\n",(0,n.jsx)(a.h3,{id:"with-invalid-data",children:"With invalid data"}),"\n",(0,n.jsxs)(a.p,{children:["By default, ",(0,n.jsx)(a.code,{children:"matchedData"})," return only data that is valid; that is, if the request contains invalid data,\nit's omitted from the result.",(0,n.jsx)("br",{}),"\nYou can set ",(0,n.jsx)(a.code,{children:"options.onlyValidData"})," to ",(0,n.jsx)(a.code,{children:"false"})," to change this behavior."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ts",children:"app.post('/signup', body('email').isEmail(), body('password').notEmpty(), (req, res) => {\n  const data = matchedData(req, { onlyValidData: false });\n  // => { email: 'not_actually_an_email', password: '' }\n});\n"})}),"\n",(0,n.jsx)(a.h3,{id:"selecting-data-from-specific-locations",children:"Selecting data from specific locations"}),"\n",(0,n.jsxs)(a.p,{children:["By default, ",(0,n.jsx)(a.code,{children:"matchedData"})," selects data validated on all of request's locations.\nYou can change this behavior by setting ",(0,n.jsx)(a.code,{children:"options.locations"})," to a list of the locations which you wish\nto select data from:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ts",children:"app.post(\n  '/signup',\n  [body('email').isEmail(), body('password').notEmpty(), query('subscribe_newsletter').isBoolean()],\n  (req, res) => {\n    const data = matchedData(req);\n    // => { email: 'foo@bar.com', password: '12345', subscribe_newsletter: true }\n\n    const data2 = matchedData(req, { locations: ['query'] });\n    // => { subscribe_newsletter: true }\n  },\n);\n"})})]})}function h(e={}){const{wrapper:a}={...(0,o.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},1670:(e,a,t)=>{t.d(a,{Z:()=>d,a:()=>s});var n=t(7378);const o={},i=n.createContext(o);function s(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);