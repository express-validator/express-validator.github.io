"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2655],{5318:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var n=t(7378);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),h=i,u=m["".concat(s,".").concat(h)]||m[h]||d[h]||l;return t?n.createElement(u,r(r({ref:a},p),{},{components:t})):n.createElement(u,r({ref:a},p))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=h;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=t[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5857:(e,a,t)=>{t.d(a,{Kv:()=>c,Y$:()=>o,$L:()=>r,yV:()=>s});var n=t(7378);const i="example_yN0T",l="exampleTitle_uU28";var r=function(e){var a=e.children;return n.createElement("div",{className:i},a)},o=function(e){var a=e.title,t=e.children;return n.createElement("div",null,n.createElement("strong",{className:l},a),t)};function s(e){var a=e.children;return n.createElement("div",null,n.createElement("strong",{className:l},"Usage example"),a)}function c(e){var a=e.children;return n.createElement("div",null,n.createElement("strong",{className:l},"Error example"),a)}},4911:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var n=t(5773),i=t(808),l=(t(7378),t(5318)),r=t(5857),o=["components"],s={title:"checkSchema",toc_max_heading_level:4},c="checkSchema()",p={unversionedId:"api/check-schema",id:"version-7.0.0/api/check-schema",title:"checkSchema",description:"checkSchema()",source:"@site/versioned_docs/version-7.0.0/api/check-schema.md",sourceDirName:"api",slug:"/api/check-schema",permalink:"/docs/api/check-schema",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/api/check-schema.md",tags:[],version:"7.0.0",frontMatter:{title:"checkSchema",toc_max_heading_level:4},sidebar:"api",previous:{title:"checkExact",permalink:"/docs/api/check-exact"},next:{title:"oneOf",permalink:"/docs/api/one-of"}},m={},d=[{value:"<code>checkSchema()</code>",id:"checkschema",level:2},{value:"Manually running <code>checkSchema()</code>",id:"manually-running",level:3},{value:"<code>Schema</code>",id:"schema",level:2},{value:"Built-in Validators",id:"built-in-validators",level:3},{value:"<code>options</code>",id:"validator-options",level:4},{value:"<code>bail</code>",id:"bail",level:4},{value:"<code>if</code>",id:"if",level:4},{value:"<code>negated</code>",id:"negated",level:4},{value:"<code>errorMessage</code>",id:"validator-errormessage",level:4},{value:"Built-in Sanitizers",id:"built-in-sanitizers",level:3},{value:"<code>options</code>",id:"sanitizer-options",level:4},{value:"Field schema modifiers",id:"field-schema-modifiers",level:3},{value:"<code>in</code>",id:"in",level:4},{value:"<code>errorMessage</code>",id:"field-errormessage",level:4},{value:"<code>optional</code>",id:"optional",level:4},{value:"Custom validators/sanitizers",id:"custom-validators",level:3}],h={toc:d};function u(e){var a=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"checkschema"},(0,l.kt)("inlineCode",{parentName:"h1"},"checkSchema()")),(0,l.kt)("h2",{id:"checkschema"},(0,l.kt)("inlineCode",{parentName:"h2"},"checkSchema()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema(schema: Schema, defaultLocations?: Location[]): ValidationChain[] & ContextRunner\n")),(0,l.kt)("p",null,"Creates a list of ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain"},"validation chains")," based on the provided ",(0,l.kt)("a",{parentName:"p",href:"#schema"},(0,l.kt)("inlineCode",{parentName:"a"},"schema")),",\nwhich can then be passed to an express.js route for validation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"app.post(\n  '/signup',\n  checkSchema({\n    email: { isEmail: true },\n    pasword: { isLength: { options: { min: 8 } } },\n  }),\n  (req, res) => {\n    // Handle request\n  },\n);\n")),(0,l.kt)("p",null,"By default, all specified fields are validated in all request locations (all of ",(0,l.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cookies"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"headers"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"query"),").",(0,l.kt)("br",{parentName:"p"}),"\n","This list can be changed by specifying the ",(0,l.kt)("inlineCode",{parentName:"p"},"defaultLocations")," parameter. For example, to validate fields by default in ",(0,l.kt)("inlineCode",{parentName:"p"},"body")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"query"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema(schema, ['body', 'query']);\n")),(0,l.kt)("p",null,"You can also fine tune the locations checked for each field by setting the ",(0,l.kt)("a",{parentName:"p",href:"#in"},(0,l.kt)("inlineCode",{parentName:"a"},"in")," property"),", which takes precedence over the ",(0,l.kt)("inlineCode",{parentName:"p"},"defaultLocations")," parameter."),(0,l.kt)("h3",{id:"manually-running"},"Manually running ",(0,l.kt)("inlineCode",{parentName:"h3"},"checkSchema()")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"checkSchema()")," returns a middleware, which makes it ideal to pass to an express.js route.\nBut since it also implements the ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/misc#contextrunner"},(0,l.kt)("inlineCode",{parentName:"a"},"ContextRunner"))," interface,\nyou can also run it manually, if you wish."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"app.post('/signup', async (req, res) => {\n  const result = await checkSchema({\n    email: { isEmail: true },\n    pasword: { isLength: { options: { min: 8 } } },\n  }).run(req);\n\n  if (!result.isEmpty()) {\n    console.log('Failed validation');\n  }\n});\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/manually-running"},'"Manually running validations" guide')," to learn more.")),(0,l.kt)("h2",{id:"schema"},(0,l.kt)("inlineCode",{parentName:"h2"},"Schema")),(0,l.kt)("p",null,"The schema is a simple object from ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/field-selection"},"field paths")," to field schemas. The field paths define which fields get selected for validation, and the schema defines how those fields get validated."),(0,l.kt)("p",null,"A field schema is an object whose keys can be a mix of one or more of"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#built-in-validators"},"built-in validators")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#built-in-sanitizers"},"built-in sanitizers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#field-schema-modifiers"},"field modifiers")),(0,l.kt)("li",{parentName:"ul"},"or any other name, meaning it's either a ",(0,l.kt)("a",{parentName:"li",href:"#custom-validators"},"custom validator or custom sanitizer"))),(0,l.kt)("p",null,"If the object keys are none of the above, then it has to be a ",(0,l.kt)("a",{parentName:"p",href:"#custom-schema"},"custom schema"),"."),(0,l.kt)("h3",{id:"built-in-validators"},"Built-in Validators"),(0,l.kt)("p",null,"Any of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#built-in-validators"},"built-in validators")," can be used in a field schema."),(0,l.kt)("p",null,"If the built-in validator is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", then it's turned on without any options:"),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: { isEmail: true },\n  password: { notEmpty: true },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('email').isEmail();\ncheck('password').notEmpty();\n")))),(0,l.kt)("p",null,"The value may also be an object, in which case the validator is turned on with additional configurations:"),(0,l.kt)("h4",{id:"validator-options"},(0,l.kt)("inlineCode",{parentName:"h4"},"options")),(0,l.kt)("p",null,"Sets the options of the validator. If there are multiple options, then ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," must be an array.\nOtherwise, you can pass the value directly."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  phone: {\n    isMobilePhone: {\n      options: ['any', { strictMode: true }],\n    },\n  },\n  password: {\n    isLength: {\n      options: { min: 8 },\n    },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('phone').isMobilePhone('any', {\n  strictMode: true,\n});\ncheck('password').isLength({ min: 8 });\n")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If the only option to be passed to the validator is an array, then it must be wrapped in another array.\nThis is usually the case of ",(0,l.kt)("inlineCode",{parentName:"p"},"isIn"),"; for example:"),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  weekend: {\n    // \ud83d\udc4e Translates to `isIn('saturday', 'sunday')`\n    isIn: { options: ['saturday', 'sunday'] },\n    // \ud83d\udc4d Translates to `isIn(['saturday', 'sunday'])`\n    isIn: { options: [['saturday', 'sunday']] },\n  },\n});\n"))),(0,l.kt)("h4",{id:"bail"},(0,l.kt)("inlineCode",{parentName:"h4"},"bail")),(0,l.kt)("p",null,"Stop running the validation chain if the current validator (or any of the previous validators) failed.\nEquivalent to using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#bail"},(0,l.kt)("inlineCode",{parentName:"a"},".bail()")," on a validation chain"),"."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: {\n    // isEmail is run first. If the email isn't valid, then the\n    // custom validator `checkEmailNotInUse` won't run\n    isEmail: { bail: true },\n    custom: { options: checkEmailNotInUse },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('email').isEmail().bail().custom(checkEmailNotInUse);\n")))),(0,l.kt)("h4",{id:"if"},(0,l.kt)("inlineCode",{parentName:"h4"},"if")),(0,l.kt)("p",null,"Adds a condition on whether the field's validators should continue running.\nEquivalent to using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#if"},(0,l.kt)("inlineCode",{parentName:"a"},".if()")," on a validation chain"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"if")," is applied ",(0,l.kt)("em",{parentName:"p"},"before")," the current validator. This means that if its condition isn't met,\nthen that validator and following validators won't run."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  newPassword: {\n    exists: {\n      // With a custom validator\n      if: (value, { req }) => !!req.body.oldPassword,\n\n      // With a validation chain\n      if: body('oldPassword').notEmpty(),\n    },\n  },\n});\n")),(0,l.kt)("h4",{id:"negated"},(0,l.kt)("inlineCode",{parentName:"h4"},"negated")),(0,l.kt)("p",null,"Negates the validator. Equivalent to using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#not"},(0,l.kt)("inlineCode",{parentName:"a"},".not()")," on a validation chain"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  password: {\n    // Check if password is not empty\n    isEmpty: { negated: true },\n  },\n});\n")),(0,l.kt)("h4",{id:"validator-errormessage"},(0,l.kt)("inlineCode",{parentName:"h4"},"errorMessage")),(0,l.kt)("p",null,"Sets the error message for a validator.\nEquivalent to using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#withmessage"},(0,l.kt)("inlineCode",{parentName:"a"},".withMessage()")," on a validation chain"),"."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: {\n    isEmail: {\n      errorMessage: 'Must be a valid e-mail address',\n    },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('email').isEmail().withMessage('Must be a valid e-mail address');\n")))),(0,l.kt)("h3",{id:"built-in-sanitizers"},"Built-in Sanitizers"),(0,l.kt)("p",null,"Any of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#built-in-sanitizers"},"built-in sanitizers")," can be used in a field schema."),(0,l.kt)("p",null,"If the built-in sanitizer is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", then it's turned on without any options:"),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  query: { trim: true },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('query').trim();\n")))),(0,l.kt)("p",null,"The value may also be an object, in which case the sanitizer is turned on with additional configurations:"),(0,l.kt)("h4",{id:"sanitizer-options"},(0,l.kt)("inlineCode",{parentName:"h4"},"options")),(0,l.kt)("p",null,"Sets the options of the sanitizer. If there are multiple options, then ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," must be an array.\nOtherwise, you can pass the value directly."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: {\n    normalizeEmail: {\n      options: { gmail_remove_subaddress: true },\n    },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('email').normalizeEmail({\n  gmail_remove_subaddress: true,\n});\n")))),(0,l.kt)("h3",{id:"field-schema-modifiers"},"Field schema modifiers"),(0,l.kt)("p",null,"The following properties can be specified in the schema of a field to modify its general behavior:"),(0,l.kt)("h4",{id:"in"},(0,l.kt)("inlineCode",{parentName:"h4"},"in")),(0,l.kt)("p",null,"Defines the location(s) in which to validate the field.\nTo validate that a field exists in either the body or in the query string, the following schema can be written:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  field: {\n    in: ['body', 'query'],\n    exists: true,\n  },\n});\n")),(0,l.kt)("h4",{id:"field-errormessage"},(0,l.kt)("inlineCode",{parentName:"h4"},"errorMessage")),(0,l.kt)("p",null,"Sets the default error message for the field's validators.",(0,l.kt)("br",{parentName:"p"}),"\n","Used when a validator doesn't specify ",(0,l.kt)("a",{parentName:"p",href:"#validator-errormessage"},(0,l.kt)("inlineCode",{parentName:"a"},"errorMessage")," in its own configurations"),"."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  password: {\n    errorMessage: 'The password must be at least 8 characters, and must contain a symbol',\n    isLength: { options: { min: 8 } },\n    matches: { options: /[-_$#]/ },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('password', 'The password must be at least 8 characters, and must contain a symbol')\n  .isLength({ min: 8 })\n  .matches(/[-_$#]/);\n")))),(0,l.kt)("h4",{id:"optional"},(0,l.kt)("inlineCode",{parentName:"h4"},"optional")),(0,l.kt)("p",null,"Sets the optional modifier on the field. Equivalent to using ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/validation-chain#optional"},(0,l.kt)("inlineCode",{parentName:"a"},".optional()")," on a validation chain"),"."),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  query: {\n    optional: true,\n    isLength: { options: { min: 3 } },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('query').optional().isLength({ min: 3 });\n")))),(0,l.kt)("h3",{id:"custom-validators"},"Custom validators/sanitizers"),(0,l.kt)("p",null,"There are two ways of defining custom validators or sanitizers using ",(0,l.kt)("inlineCode",{parentName:"p"},"checkSchema()"),"."),(0,l.kt)("p",null,"The first way is to set ",(0,l.kt)("inlineCode",{parentName:"p"},"custom")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"customSanitizer")," in a field's schema.\nThese work exactly like any other ",(0,l.kt)("a",{parentName:"p",href:"#built-in-validators"},"validator")," or ",(0,l.kt)("a",{parentName:"p",href:"#built-in-sanitizers"},"sanitizer")," in the schema:"),(0,l.kt)(r.$L,{mdxType:"SideBySideExample"},(0,l.kt)(r.Y$,{title:"checkSchema() usage",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: {\n    custom: {\n      options: checkIfEmailExists,\n      bail: true,\n    },\n    customSanitizer: {\n      options: removeEmailAttribute,\n    },\n  },\n});\n"))),(0,l.kt)(r.Y$,{title:"Validation chain equivalent",mdxType:"ExampleCell"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"check('email').custom(checkIfEmailExists).bail().customSanitizer(removeEmailAttribute);\n")))),(0,l.kt)("p",null,"While this works fine, it's only possible to set a single custom validator/sanitizer when using schemas.\nThe reason for this is simple:\n",(0,l.kt)("strong",{parentName:"p"},"objects in JavaScript cannot have duplicated keys")," (well, they can, but only the last one will apply)."),(0,l.kt)("p",null,"For this reason, it's possible to use multiple custom validators/sanitizers in ",(0,l.kt)("inlineCode",{parentName:"p"},"checkSchema()")," by\nsetting in the field schema a key which isn't any of the ",(0,l.kt)("a",{parentName:"p",href:"#built-in-validators"},"built-in validators"),",\n",(0,l.kt)("a",{parentName:"p",href:"#built-in-sanitizers"},"sanitizers")," or ",(0,l.kt)("a",{parentName:"p",href:"#field-schema-modifiers"},"modifiers"),".",(0,l.kt)("br",{parentName:"p"}),"\n","These keys must be an object with a single ",(0,l.kt)("inlineCode",{parentName:"p"},"custom")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"customSanitizer")," function."),(0,l.kt)("p",null,"The previous example can be rewritten like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"checkSchema({\n  email: {\n    emailNotInUse: {\n      custom: checkEmailNotInUse,\n      bail: true,\n    },\n    removeEmailAttribute: {\n      customSanitizer: removeEmailAttribute,\n    },\n  },\n});\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The name of the custom validator/sanitizer is not used by ",(0,l.kt)("inlineCode",{parentName:"p"},"checkSchema()"),".\nDifferent schemas can make use of the same custom name without clash.")))}u.isMDXComponent=!0}}]);