"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4567],{5318:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(7378);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||s;return t?n.createElement(f,o(o({ref:r},d),{},{components:t})):n.createElement(f,o({ref:r},d))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6504:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var n=t(5773),a=t(808),s=(t(7378),t(5318)),o=["components"],l={id:"wildcards",title:"Wildcards"},i=void 0,c={unversionedId:"wildcards",id:"version-5.3.0/wildcards",title:"Wildcards",description:"Sometimes you will want to apply the same rules to all items of an array or all keys of some object.",source:"@site/versioned_docs/version-5.3.0/feature-wildcards.md",sourceDirName:".",slug:"/wildcards",permalink:"/docs/5.3.0/wildcards",draft:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-5.3.0/feature-wildcards.md",tags:[],version:"5.3.0",frontMatter:{id:"wildcards",title:"Wildcards"},sidebar:"version-5.3.0/docs",previous:{title:"Custom Error Messages",permalink:"/docs/5.3.0/custom-error-messages"},next:{title:"Schema Validation",permalink:"/docs/5.3.0/schema-validation"}},d={},p=[],u={toc:p};function m(e){var r=e.components,t=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Sometimes you will want to apply the same rules to all items of an array or all keys of some object.",(0,s.kt)("br",{parentName:"p"}),"\n","That's what the ",(0,s.kt)("inlineCode",{parentName:"p"},"*")," character - also known as a wildcard -- is for."),(0,s.kt)("p",null,"For example, imagine you want to validate that all addresses have a valid postal code,\nand that the number of each address is sanitized as an integer number."),(0,s.kt)("p",null,"We can do this with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const express = require('express');\nconst { check } = require('express-validator/check');\nconst { sanitize } = require('express-validator/filter');\n\nconst app = express();\napp.use(express.json());\n\napp.post('/addresses', [\n  check('addresses.*.postalCode').isPostalCode(),\n  sanitize('addresses.*.number').toInt()\n], (req, res) => {\n  // Handle the request\n});\n")),(0,s.kt)("p",null,"This will handle cases where you send an array of addresses:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "addresses": [\n    { "postalCode": "2010", "number": "500" },\n    { "postalCode": "", "number": "501" },\n  ]\n}\n')),(0,s.kt)("p",null,"...or even cases where you want a predefined set of addresses:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "addresses": {\n    "home": { "postalCode": "", "number": "501" },\n    "work": { "postalCode": "2010", "number": "500" }\n  }\n}\n')))}m.isMDXComponent=!0}}]);