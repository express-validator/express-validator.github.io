"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[550],{8409:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var t=n(4246),a=n(1670),s=n(3930),o=n(9798);const l={title:"Errors and Validation Results"},i=void 0,d={id:"api/validation-result",title:"Errors and Validation Results",description:"This page contains information about how you can determine if a request has been valid.",source:"@site/versioned_docs/version-7.0.0/api/validation-result.md",sourceDirName:"api",slug:"/api/validation-result",permalink:"/docs/api/validation-result",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-7.0.0/api/validation-result.md",tags:[],version:"7.0.0",frontMatter:{title:"Errors and Validation Results"},sidebar:"api",previous:{title:"matchedData",permalink:"/docs/api/matched-data"},next:{title:"Miscellaneous",permalink:"/docs/api/misc"}},c={},u=[{value:"<code>validationResult()</code>",id:"validationresult",level:2},{value:"<code>withDefaults()</code>",id:"withdefaults",level:3},{value:"<code>ResultFactory&lt;T&gt;</code>",id:"resultfactory",level:2},{value:"<code>Result&lt;T&gt;</code>",id:"result",level:2},{value:"<code>.isEmpty()</code>",id:"isempty",level:3},{value:"<code>.formatWith()</code>",id:"formatwith",level:3},{value:"<code>.array()</code>",id:"array",level:3},{value:"<code>.mapped()</code>",id:"mapped",level:3},{value:"<code>.throw()</code>",id:"throw",level:3},{value:"Error types",id:"error-types",level:2},{value:"<code>FieldValidationError</code>",id:"fieldvalidationerror",level:3},{value:"<code>AlternativeValidationError</code>",id:"alternativevalidationerror",level:3},{value:"<code>GroupedAlternativeValidationError</code>",id:"groupedalternativevalidationerror",level:3},{value:"<code>UnknownFieldValidationError</code>",id:"unknownfieldvalidationerror",level:3},{value:"<code>ValidationError</code>",id:"validationerror",level:3},{value:"<code>ErrorFormatter&lt;T&gt;</code>",id:"errorformatter",level:2}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"This page contains information about how you can determine if a request has been valid.\nIt also documents all possible validation error types."}),"\n",(0,t.jsx)(r.h2,{id:"validationresult",children:(0,t.jsx)(r.code,{children:"validationResult()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"validationResult(req: Request): Result<ValidationError>\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Extracts the validation results from a request, wraps them in a ",(0,t.jsxs)(r.a,{href:"#result",children:[(0,t.jsx)(r.code,{children:"Result"})," object"]}),",\nand returns it."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"lang",children:[(0,t.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const { query, validationResult } = require('express-validator');\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const result = validationResult(req);\n  // Use `result` to figure out if the request is valid or not\n});\n"})})}),(0,t.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { query, Result, validationResult } from 'express-validator';\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const result: Result = validationResult(req);\n  // Use `result` to figure out if the request is valid or not\n});\n"})})})]}),"\n",(0,t.jsx)(r.h3,{id:"withdefaults",children:(0,t.jsx)(r.code,{children:"withDefaults()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"validationResult.withDefaults<T>(options: { formatter?: ErrorFormatter<T> }): ResultFactory<T>\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Creates a new ",(0,t.jsx)(r.code,{children:"validationResult()"}),"-like function that uses the provided options as the defaults in\nthe returned ",(0,t.jsx)(r.code,{children:"Result"})," object."]}),"\n",(0,t.jsxs)(r.p,{children:["For example, it's possible to set the default ",(0,t.jsx)(r.a,{href:"#errorformatter",children:"error formatter"})," of a result like this:"]}),"\n",(0,t.jsxs)(s.Z,{groupId:"lang",children:[(0,t.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const { query, validationResult } = require('express-validator');\nconst myValidationResult = validationResult.withDefaults({\n  formatter: error => error.msg,\n});\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const errors = myValidationResult(req).array();\n  // => ['Invalid value']\n});\n"})})}),(0,t.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { query, ResultFactory, validationResult } from 'express-validator';\nconst myValidationResult: ResultFactory<string> = validationResult.withDefaults({\n  formatter: error => error.msg as string,\n});\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const errors: string[] = myValidationResult(req).array();\n  // => ['Invalid value']\n});\n"})})})]}),"\n",(0,t.jsx)(r.h2,{id:"resultfactory",children:(0,t.jsx)(r.code,{children:"ResultFactory<T>"})}),"\n",(0,t.jsx)(r.h2,{id:"result",children:(0,t.jsx)(r.code,{children:"Result<T>"})}),"\n",(0,t.jsx)(r.p,{children:"The result object is a wrapper around the validation state of a request.\nIt provides a couple of methods that you can use to determine if the request is valid or not."}),"\n",(0,t.jsxs)(r.admonition,{type:"info",children:[(0,t.jsxs)(r.p,{children:["The type parameter ",(0,t.jsx)(r.code,{children:"T"})," refers to the type that errors as returned by methods such as\n",(0,t.jsx)(r.a,{href:"#array",children:(0,t.jsx)(r.code,{children:".array()"})})," and ",(0,t.jsx)(r.a,{href:"#mapped",children:(0,t.jsx)(r.code,{children:".mapped()"})})," will have."]}),(0,t.jsxs)(r.p,{children:["Its default is ",(0,t.jsx)(r.a,{href:"#validationerror",children:(0,t.jsx)(r.code,{children:"ValidationError"})}),", which can be changed by using ",(0,t.jsx)(r.a,{href:"#formatwith",children:(0,t.jsx)(r.code,{children:".formatWith()"})}),"."]})]}),"\n",(0,t.jsx)(r.h3,{id:"isempty",children:(0,t.jsx)(r.code,{children:".isEmpty()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"isEmpty(): boolean\n"})}),"\n",(0,t.jsx)(r.p,{children:"Returns whether the request contains validation errors, and therefore whether it's valid or not."}),"\n",(0,t.jsx)(r.h3,{id:"formatwith",children:(0,t.jsx)(r.code,{children:".formatWith()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"formatWith<T>(formatter: ErrorFormatter<T>): Result<T>\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Rewraps the validation state in a new ",(0,t.jsx)(r.code,{children:"Result"})," object that uses ",(0,t.jsx)(r.code,{children:"formatter"})," as its ",(0,t.jsx)(r.a,{href:"#errorformatter",children:"error formatter"}),"."]}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"\ud83d\udcad Why does this method return a new Result?"}),(0,t.jsxs)(r.p,{children:["If you've read through other pages of this documentation, you might be asking yourself why can't\n",(0,t.jsx)(r.code,{children:".formatWith()"})," mutate itself, like validation chains do?"]}),(0,t.jsxs)(r.p,{children:["The reason for this is simple: TypeScript.",(0,t.jsx)("br",{}),"\nIt's not possible to change the generic type of an existing object. If some code references the\nresult as ",(0,t.jsx)(r.code,{children:"Result<{ error: string }>"}),", but after ",(0,t.jsx)(r.code,{children:"formatWith"})," it's now actually ",(0,t.jsx)(r.code,{children:"Result<{ message: string }>"}),",\nsome code consuming the old ",(0,t.jsx)(r.code,{children:"Result"})," type would not get compile-time errors about the type mismatch."]})]}),"\n",(0,t.jsxs)(s.Z,{groupId:"lang",children:[(0,t.jsx)(o.Z,{value:"js",label:"JavaScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"const { query, validationResult } = require('express-validator');\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const result = validationResult(req);\n  const errors = result.array();\n  // => [{ msg: 'Invalid value', ... }]\n\n  const result2 = result.formatWith(error => error.msg);\n  const errors2 = result2.array();\n  // => ['Invalid value']\n});\n"})})}),(0,t.jsx)(o.Z,{value:"ts",label:"TypeScript",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { query, Result, validationResult } from 'express-validator';\n\napp.post('/hello', query('person').notEmpty(), (req, res) => {\n  const result: Result = validationResult(req);\n  const errors = result.array();\n  // => [{ msg: 'Invalid value', ... }]\n\n  const result2: Result<string> = result.formatWith(error => error.msg as string);\n  const errors2 = result2.array();\n  // => ['Invalid value']\n});\n"})})})]}),"\n",(0,t.jsx)(r.h3,{id:"array",children:(0,t.jsx)(r.code,{children:".array()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"array(options?: { onlyFirstError?: boolean }): T[]\n"})}),"\n",(0,t.jsx)(r.p,{children:"Returns a list of all errors from all validated fields."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const result = validationResult(req).array();\n// => [{ msg: 'Invalid value', path: 'field1' }, { msg: 'Invalid value', path: 'field1' }]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"options.onlyFirstError"})," is set to ",(0,t.jsx)(r.code,{children:"true"}),", then only the first error of each field is returned:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const result = validationResult(req).array({ onlyFirstError: true });\n// => [{ msg: 'Invalid value', path: 'field1' }]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"mapped",children:(0,t.jsx)(r.code,{children:".mapped()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"mapped(): Record<string, T>\n"})}),"\n",(0,t.jsx)(r.p,{children:"Returns an object from field path to error.\nIf a field has multiple errors, only the first one is returned."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const result = validationResult(req).mapped();\n// => { field1: { msg: 'Invalid value', ... }, field2: { msg: 'Invalid value', ... } }\n"})}),"\n",(0,t.jsx)(r.h3,{id:"throw",children:(0,t.jsx)(r.code,{children:".throw()"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"throw(): void\n"})}),"\n",(0,t.jsxs)(r.p,{children:["If the result object has errors, then this method throws an error decorated with the same methods as\nthe ",(0,t.jsx)(r.code,{children:"Result"})," type.",(0,t.jsx)("br",{}),"\nThis is useful if you wish to forward the errors to the error handler middleware of your express.js\napplication, for example."]}),"\n",(0,t.jsx)(r.p,{children:"If the result object has no errors, then this method does nothing."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"app.post('/hello', query('person').notEmpty(), (req, res) => {\n  try {\n    validationResult(req).throw();\n    res.send(`Hello, ${req.query.person}!`);\n  } catch (e) {\n    res.status(400).send({ errors: e.mapped() });\n  }\n});\n"})}),"\n",(0,t.jsx)(r.h2,{id:"error-types",children:"Error types"}),"\n",(0,t.jsx)(r.p,{children:"Different APIs in express-validator cause different types of validation errors.\nAll of them are documented here:"}),"\n",(0,t.jsx)(r.h3,{id:"fieldvalidationerror",children:(0,t.jsx)(r.code,{children:"FieldValidationError"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type FieldValidationError = {\n  type: 'field';\n  location: Location;\n  path: string;\n  value: any;\n  msg: any;\n};\n"})}),"\n",(0,t.jsx)(r.p,{children:"Represents an error caused when validating a single field, simple as that."}),"\n",(0,t.jsx)(r.h3,{id:"alternativevalidationerror",children:(0,t.jsx)(r.code,{children:"AlternativeValidationError"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type AlternativeValidationError = {\n  type: 'alternative';\n  msg: any;\n  nestedErrors: FieldValidationError[];\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Represents an error caused when all alternatives (e.g. in ",(0,t.jsx)(r.a,{href:"/docs/api/one-of",children:(0,t.jsx)(r.code,{children:"oneOf()"})}),") were invalid.\n",(0,t.jsx)(r.code,{children:"nestedErrors"})," contains a flat list of the individual field errors."]}),"\n",(0,t.jsx)(r.h3,{id:"groupedalternativevalidationerror",children:(0,t.jsx)(r.code,{children:"GroupedAlternativeValidationError"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type AlternativeValidationError = {\n  type: 'alternative_grouped';\n  msg: any;\n  nestedErrors: FieldValidationError[][];\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Represents an error caused when all alternatives (e.g. in ",(0,t.jsx)(r.a,{href:"/docs/api/one-of",children:(0,t.jsx)(r.code,{children:"oneOf()"})}),") were invalid.\n",(0,t.jsx)(r.code,{children:"nestedErrors"})," contains the list of the individual field errors, grouped by the alternative."]}),"\n",(0,t.jsx)(r.h3,{id:"unknownfieldvalidationerror",children:(0,t.jsx)(r.code,{children:"UnknownFieldValidationError"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type UnknownFieldsError = {\n  type: 'unknown_fields';\n  msg: any;\n  fields: { path: string; location: Location; value: any }[];\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Represents an error caused when one or more fields are unknown; that is, they didn't have a validation\nchain when ",(0,t.jsx)(r.code,{children:"checkExact()"})," kicked off.\n",(0,t.jsx)(r.code,{children:"fields"})," contains the list of all unknown fields' paths, locations and values."]}),"\n",(0,t.jsx)(r.h3,{id:"validationerror",children:(0,t.jsx)(r.code,{children:"ValidationError"})}),"\n",(0,t.jsxs)(r.p,{children:["Any of the validation errors.\nIt's possible to determine what the error actually is by looking at its ",(0,t.jsx)(r.code,{children:"type"})," property:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"switch (error.type) {\n  case 'field':\n    // `error` is a `FieldValidationError`\n    console.log(error.path, error.location, error.value);\n    break;\n\n  case 'alternative':\n    // `error` is an `AlternativeValidationError`\n    console.log(error.nestedErrors);\n    break;\n\n  case 'alternative_grouped':\n    // `error` is a `GroupedAlternativeValidationError`\n    error.nestedErrors.forEach((nestedErrors, i) => {\n      console.log(`Errors from chain ${i}:`);\n      console.log(nestedErrors);\n    });\n    break;\n\n  case 'unknown_fields':\n    // `error` is an `UnknownFieldsError`\n    console.log(error.fields);\n    break;\n\n  default:\n    // Error is not any of the known types! Do something else.\n    throw new Error(`Unknown error type ${error.type}`);\n}\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["If you're using TypeScript, this technique is known as ",(0,t.jsx)(r.a,{href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions",children:"discriminated unions"}),"."]})}),"\n",(0,t.jsx)(r.h2,{id:"errorformatter",children:(0,t.jsx)(r.code,{children:"ErrorFormatter<T>"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"type ErrorFormatter<T> = (error: ValidationError) => T;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["A function used to format errors returned by methods such as ",(0,t.jsx)(r.a,{href:"#mapped",children:(0,t.jsx)(r.code,{children:"Result#mapped()"})})," and ",(0,t.jsx)(r.a,{href:"#array",children:(0,t.jsx)(r.code,{children:"Result#array()"})}),".\nIt takes the ",(0,t.jsx)(r.a,{href:"#validationerror",children:"unformatted error"})," and must return a new value."]})]})}function p(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9798:(e,r,n)=>{n.d(r,{Z:()=>o});n(7378);var t=n(624);const a={tabItem:"tabItem_wHwb"};var s=n(4246);function o(e){var r=e.children,n=e.hidden,o=e.className;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,o),hidden:n,children:r})}},3930:(e,r,n)=>{n.d(r,{Z:()=>w});var t=n(7378),a=n(624),s=n(3457),o=n(3620),l=n(9834),i=n(654),d=n(784),c=n(1819);function u(e){var r,n;return null!=(r=null==(n=t.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,t.isValidElement)(e)&&((r=e.props)&&"object"==typeof r&&"value"in r))return e;var r;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?r:[]}function h(e){var r=e.values,n=e.children;return(0,t.useMemo)((function(){var e=null!=r?r:function(e){return u(e).map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes,default:r.default}}))}(n);return function(e){var r=(0,d.l)(e,(function(e,r){return e.value===r.value}));if(r.length>0)throw new Error('Docusaurus error: Duplicate values "'+r.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[r,n])}function p(e){var r=e.value;return e.tabValues.some((function(e){return e.value===r}))}function v(e){var r=e.queryString,n=void 0!==r&&r,a=e.groupId,s=(0,o.k6)(),l=function(e){var r=e.queryString,n=void 0!==r&&r,t=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:a});return[(0,i._X)(l),(0,t.useCallback)((function(e){if(l){var r=new URLSearchParams(s.location.search);r.set(l,e),s.replace(Object.assign({},s.location,{search:r.toString()}))}}),[l,s])]}function f(e){var r,n,a,s,o=e.defaultValue,i=e.queryString,d=void 0!==i&&i,u=e.groupId,f=h(e),m=(0,t.useState)((function(){return function(e){var r,n=e.defaultValue,t=e.tabValues;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+t.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var a=null!=(r=t.find((function(e){return e.default})))?r:t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:o,tabValues:f})})),x=m[0],j=m[1],g=v({queryString:d,groupId:u}),y=g[0],b=g[1],w=(r=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),n=(0,c.Nk)(r),a=n[0],s=n[1],[a,(0,t.useCallback)((function(e){r&&s.set(e)}),[r,s])]),E=w[0],R=w[1],q=function(){var e=null!=y?y:E;return p({value:e,tabValues:f})?e:null}();return(0,l.Z)((function(){q&&j(q)}),[q]),{selectedValue:x,selectValue:(0,t.useCallback)((function(e){if(!p({value:e,tabValues:f}))throw new Error("Can't select invalid tab value="+e);j(e),b(e),R(e)}),[b,R,f]),tabValues:f}}var m=n(6457);const x={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var j=n(4246);function g(e){var r=e.className,n=e.block,t=e.selectedValue,o=e.selectValue,l=e.tabValues,i=[],d=(0,s.o5)().blockElementScrollPositionUntilNextRender,c=function(e){var r=e.currentTarget,n=i.indexOf(r),a=l[n].value;a!==t&&(d(r),o(a))},u=function(e){var r,n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":var t,a=i.indexOf(e.currentTarget)+1;n=null!=(t=i[a])?t:i[0];break;case"ArrowLeft":var s,o=i.indexOf(e.currentTarget)-1;n=null!=(s=i[o])?s:i[i.length-1]}null==(r=n)||r.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},r),children:l.map((function(e){var r=e.value,n=e.label,s=e.attributes;return(0,j.jsx)("li",Object.assign({role:"tab",tabIndex:t===r?0:-1,"aria-selected":t===r,ref:function(e){return i.push(e)},onKeyDown:u,onClick:c},s,{className:(0,a.Z)("tabs__item",x.tabItem,null==s?void 0:s.className,{"tabs__item--active":t===r}),children:null!=n?n:r}),r)}))})}function y(e){var r=e.lazy,n=e.children,a=e.selectedValue,s=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){var o=s.find((function(e){return e.props.value===a}));return o?(0,t.cloneElement)(o,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map((function(e,r){return(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==a})}))})}function b(e){var r=f(e);return(0,j.jsxs)("div",{className:(0,a.Z)("tabs-container",x.tabList),children:[(0,j.jsx)(g,Object.assign({},e,r)),(0,j.jsx)(y,Object.assign({},e,r))]})}function w(e){var r=(0,m.Z)();return(0,j.jsx)(b,Object.assign({},e,{children:u(e.children)}),String(r))}},1670:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>o});var t=n(7378);const a={},s=t.createContext(a);function o(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);