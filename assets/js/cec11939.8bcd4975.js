"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9124],{78273:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>o});var n=s(24246),a=s(71670);const d={id:"legacy-api",title:"Legacy API"},r=void 0,l={id:"legacy-api",title:"Legacy API",description:'The "legacy API" is the same API used by version 3 and older releases of express-validator.',source:"@site/versioned_docs/version-5.2.0/api-legacy.md",sourceDirName:".",slug:"/legacy-api",permalink:"/docs/5.2.0/legacy-api",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-5.2.0/api-legacy.md",tags:[],version:"5.2.0",frontMatter:{id:"legacy-api",title:"Legacy API"},sidebar:"api",previous:{title:"Validation Result API",permalink:"/docs/5.2.0/validation-result-api"}},c={},o=[{value:"Setup",id:"setup",level:2},{value:"Middleware options",id:"middleware-options",level:2},{value:"Legacy Validation Chain",id:"legacy-validation-chain",level:2},{value:"<code>req.check(field[, message])</code>",id:"reqcheckfield-message",level:2},{value:"<code>req.checkBody(field[, message])</code>",id:"reqcheckbodyfield-message",level:2},{value:"<code>req.checkCookies(field[, message])</code>",id:"reqcheckcookiesfield-message",level:2},{value:"<code>req.checkHeaders(field[, message])</code>",id:"reqcheckheadersfield-message",level:2},{value:"<code>req.checkParams(field[, message])</code>",id:"reqcheckparamsfield-message",level:2},{value:"<code>req.checkQuery(field[, message])</code>",id:"reqcheckqueryfield-message",level:2},{value:"<code>req.sanitize(field)</code>",id:"reqsanitizefield",level:2},{value:"<code>req.sanitizeBody(field[, message])</code>",id:"reqsanitizebodyfield-message",level:2},{value:"<code>req.sanitizeCookies(field[, message])</code>",id:"reqsanitizecookiesfield-message",level:2},{value:"<code>req.sanitizeHeaders(field[, message])</code>",id:"reqsanitizeheadersfield-message",level:2},{value:"<code>req.sanitizeParams(field[, message])</code>",id:"reqsanitizeparamsfield-message",level:2},{value:"<code>req.sanitizeQuery(field[, message])</code>",id:"reqsanitizequeryfield-message",level:2},{value:"<code>req.getValidationResult()</code>",id:"reqgetvalidationresult",level:2},{value:"<code>req.asyncValidationErrors([mapped])</code>",id:"reqasyncvalidationerrorsmapped",level:2},{value:"<code>req.validationErrors([mapped])</code>",id:"reqvalidationerrorsmapped",level:2},{value:"Schema validation",id:"schema-validation",level:2}];function t(e){const i={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:'The "legacy API" is the same API used by version 3 and older releases of express-validator.'}),"\n",(0,n.jsx)(i.p,{children:"It's based around setting a global middleware in your express app and decorating the request object with new methods."}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:["This API ",(0,n.jsx)(i.strong,{children:"MUST NOT"})," be used by new apps, since it may not receive new updates and can even be removed in a future major version."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"setup",children:"Setup"}),"\n",(0,n.jsx)(i.p,{children:"You must mount the middleware in your app before you get access to the validation/sanitization methods:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:"const expressValidator = require('express-validator');\napp.use(expressValidator(middlewareOptions));\n"})}),"\n",(0,n.jsx)(i.h2,{id:"middleware-options",children:"Middleware options"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"errorFormatter (param, msg, value, location)"}),": a function that formats the error objects before returning them to your route handlers."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"customValidators"}),": an object where you can specify custom validators.",(0,n.jsx)(i.br,{}),"\n","The key will be the name of the validator, while the value is the validation function, receiving the value and any option."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"customSanitizers"}),": an object where you can specify custom sanitizers.",(0,n.jsx)(i.br,{}),"\n","The key will be the name of the sanitizer, while the value is the sanitization function, receiving the value and any option."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"legacy-validation-chain",children:"Legacy Validation Chain"}),"\n",(0,n.jsxs)(i.p,{children:["The Legacy Validation Chain instances provides further functionality than the one provided by the base ",(0,n.jsx)(i.a,{href:"/docs/5.2.0/validation-chain-api",children:"Validation Chain"})," objects.",(0,n.jsx)(i.br,{}),"\n","It also differs in that the legacy one is not a middleware ",(0,n.jsx)(i.em,{children:"per se"}),"."]}),"\n",(0,n.jsx)(i.p,{children:"Any custom validator specified in the middleware will be made available\nin instances of this validation chain."}),"\n",(0,n.jsx)(i.p,{children:"Additionally, the following validators are also available:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:".notEmpty()"}),": alias of ",(0,n.jsx)(i.code,{children:".isLength({ min: 1 })"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:".len()"}),": alias of ",(0,n.jsx)(i.code,{children:".isLength()"})]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckfield-message",children:(0,n.jsx)(i.code,{children:"req.check(field[, message])"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"field"}),": the name of a single field to validate against."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"message"})," ",(0,n.jsx)(i.em,{children:"(optional)"}),": an error message to use when failed validators don't specify a message. Defaults to ",(0,n.jsx)(i.code,{children:"Invalid value"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:"Returns:"})," a ",(0,n.jsx)(i.a,{href:"#legacy-validation-chain",children:"legacy validation chain"})]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Creates a validation chain for one field. It may be located in any of the following request objects:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"req.params"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"req.query"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"req.body"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"req.headers"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"req.cookies"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"If it's present in more than one location, then only the first one (following the above order) will be validated against."}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:["This function is also aliased as ",(0,n.jsx)(i.code,{children:"req.assert()"})," and ",(0,n.jsx)(i.code,{children:"req.validate()"}),"."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckbodyfield-message",children:(0,n.jsx)(i.code,{children:"req.checkBody(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.check(field[, message])"}),", but only checking ",(0,n.jsx)(i.code,{children:"req.body"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckcookiesfield-message",children:(0,n.jsx)(i.code,{children:"req.checkCookies(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.check(field[, message])"}),", but only checking ",(0,n.jsx)(i.code,{children:"req.cookies"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckheadersfield-message",children:(0,n.jsx)(i.code,{children:"req.checkHeaders(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.check(field[, message])"}),", but only checking ",(0,n.jsx)(i.code,{children:"req.headers"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckparamsfield-message",children:(0,n.jsx)(i.code,{children:"req.checkParams(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.check(field[, message])"}),", but only checking ",(0,n.jsx)(i.code,{children:"req.params"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqcheckqueryfield-message",children:(0,n.jsx)(i.code,{children:"req.checkQuery(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.check(field[, message])"}),", but only checking ",(0,n.jsx)(i.code,{children:"req.query"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizefield",children:(0,n.jsx)(i.code,{children:"req.sanitize(field)"})}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:"Returns:"})," a sanitizer chain"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Creates a sanitizer chain that, when any of the sanitization methods is used, the return value is the sanitized value.",(0,n.jsx)(i.br,{}),"\n","Also, the parameter is sanitized in-place; that is, in the below example,\n",(0,n.jsx)(i.code,{children:"req.body.comment"})," will be updated to the sanitized value."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-js",children:"const comment = req.sanitize('comment').trim();\nconsole.log(comment === req.body.comment);\n"})}),"\n",(0,n.jsxs)(i.p,{children:["If the sanitized parameter is present in more than one location (eg ",(0,n.jsx)(i.code,{children:"req.query.comment"})," and ",(0,n.jsx)(i.code,{children:"req.body.comment"}),"), the will all be sanitized."]}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:["This function is also aliased as ",(0,n.jsx)(i.code,{children:"req.filter()"}),"."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizebodyfield-message",children:(0,n.jsx)(i.code,{children:"req.sanitizeBody(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.sanitize(field[, message])"}),", but only sanitizing ",(0,n.jsx)(i.code,{children:"req.body"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizecookiesfield-message",children:(0,n.jsx)(i.code,{children:"req.sanitizeCookies(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.sanitize(field[, message])"}),", but only sanitizing ",(0,n.jsx)(i.code,{children:"req.cookies"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizeheadersfield-message",children:(0,n.jsx)(i.code,{children:"req.sanitizeHeaders(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.sanitize(field[, message])"}),", but only sanitizing ",(0,n.jsx)(i.code,{children:"req.headers"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizeparamsfield-message",children:(0,n.jsx)(i.code,{children:"req.sanitizeParams(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.sanitize(field[, message])"}),", but only sanitizing ",(0,n.jsx)(i.code,{children:"req.params"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqsanitizequeryfield-message",children:(0,n.jsx)(i.code,{children:"req.sanitizeQuery(field[, message])"})}),"\n",(0,n.jsxs)(i.p,{children:["Same as ",(0,n.jsx)(i.code,{children:"req.sanitize(field[, message])"}),", but only sanitizing ",(0,n.jsx)(i.code,{children:"req.query"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"reqgetvalidationresult",children:(0,n.jsx)(i.code,{children:"req.getValidationResult()"})}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:"Returns:"})," a promise for a ",(0,n.jsx)(i.a,{href:"/docs/5.2.0/validation-result-api",children:"Validation Result"})," object"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Runs all validations and returns a validation result object for the errors gathered, for both sync and async validators."}),"\n",(0,n.jsx)(i.h2,{id:"reqasyncvalidationerrorsmapped",children:(0,n.jsx)(i.code,{children:"req.asyncValidationErrors([mapped])"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"mapped"})," ",(0,n.jsx)(i.em,{children:"(optional)"}),": whether the result must be an object instead of an array. Defaults to ",(0,n.jsx)(i.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:"Returns:"})," a promise which will resolve in case all validators passed, or reject with an array of errors or an object of errors (in case ",(0,n.jsx)(i.code,{children:"mapped"})," argument is ",(0,n.jsx)(i.code,{children:"true"}),")."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Runs all validations and returns the errors gathered for all of them."}),"\n",(0,n.jsx)(i.h2,{id:"reqvalidationerrorsmapped",children:(0,n.jsx)(i.code,{children:"req.validationErrors([mapped])"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"mapped"})," ",(0,n.jsx)(i.em,{children:"(optional)"}),": whether the result must be an object instead of an array. Defaults to ",(0,n.jsx)(i.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(i.blockquote,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.em,{children:"Returns:"})," ",(0,n.jsx)(i.code,{children:"false"})," if no errors happened, an array of errors or an object of errors (in case ",(0,n.jsx)(i.code,{children:"mapped"})," argument is ",(0,n.jsx)(i.code,{children:"true"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Runs all validations and returns the errors gathered ",(0,n.jsx)(i.em,{children:"only"})," for the completed validators.",(0,n.jsx)(i.br,{}),"\n","This probably means any async validator will not be completed by the time this method responds."]}),"\n",(0,n.jsx)(i.h2,{id:"schema-validation",children:"Schema validation"}),"\n",(0,n.jsxs)(i.p,{children:["All ",(0,n.jsx)(i.code,{children:"req.check"})," methods can do schema validation. The schema syntax is the same as described in ",(0,n.jsx)(i.a,{href:"/docs/5.2.0/schema-validation",children:"Schema Validation"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},71670:(e,i,s)=>{s.d(i,{Z:()=>l,a:()=>r});var n=s(27378);const a={},d=n.createContext(a);function r(e){const i=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);