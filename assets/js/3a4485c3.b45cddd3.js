"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8592],{91453:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=n(62540),a=n(43023);const s={id:"sanitization-chain-api",title:"Sanitization Chain API"},r=void 0,o={id:"sanitization-chain-api",title:"Sanitization Chain API",description:"The sanitization chain is a middleware, and it should be passed to an Express route handler.",source:"@site/versioned_docs/version-5.2.0/api-sanitization-chain.md",sourceDirName:".",slug:"/sanitization-chain-api",permalink:"/docs/5.2.0/sanitization-chain-api",draft:!1,unlisted:!1,editUrl:"https://github.com/express-validator/express-validator/edit/master/docs/versioned_docs/version-5.2.0/api-sanitization-chain.md",tags:[],version:"5.2.0",frontMatter:{id:"sanitization-chain-api",title:"Sanitization Chain API"},sidebar:"api",previous:{title:"filter API",permalink:"/docs/5.2.0/filter-api"},next:{title:"Validation Chain API",permalink:"/docs/5.2.0/validation-chain-api"}},l={},c=[{value:"<code>.customSanitizer(sanitizer)</code>",id:"customsanitizersanitizer",level:2}];function d(e){const i={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["The sanitization chain is a middleware, and it should be passed to an Express route handler.",(0,t.jsx)(i.br,{}),"\n","When the middleware runs, it will modify each field in place, applying each of the sanitizers in the order they were specified:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"app.get('/', sanitizeBody('trimMe').trim(), (req, res, next) => {\n  // If req.body.trimMe was originally \"  something \",\n  // its sanitized value will be \"something\"\n  console.log(req.body.trimMe);\n});\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Any of the sanitization methods listed by ",(0,t.jsx)(i.a,{href:"https://github.com/chriso/validator.js",children:"validator.js"})," are made available in all sanitization chains created by express-validator, as long as we're supporting the most up-to-date validator version."]}),"\n",(0,t.jsx)(i.p,{children:"Additionally, the following methods are also available:"}),"\n",(0,t.jsx)(i.h2,{id:"customsanitizersanitizer",children:(0,t.jsx)(i.code,{children:".customSanitizer(sanitizer)"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"sanitizer(value, { req, location, path })"}),": the custom sanitizer function.",(0,t.jsx)(i.br,{}),"\n","Receives the value of the field being sanitized, as well as the express request, the location and the field path."]}),"\n"]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.em,{children:"Returns:"})," the current sanitization chain instance"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Adds a custom sanitizer to the current sanitization chain. It must synchronously return the new value."}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:"app.get('/object/:id', sanitizeParam('id').customSanitizer((value, { req }) => {\n  return req.query.type === 'user' ? ObjectId(value) : Number(value);\n}), objectHandler)\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},43023:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var t=n(63696);const a={},s=t.createContext(a);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);